// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerSessionMessage.proto

#include "ServerSessionMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_c2s_client_connected_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_c2s_client_data_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_c2s_client_disconnected_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_g2s_register_response_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_s2c_data_message_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_s2c_kick_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_s2c_multi_data_message_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_s2c_multi_kick_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_s2c_setclientlevel_ServerSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_s2g_register_server_ServerSessionMessage_2eproto;
namespace com {
namespace starlit {
namespace network {
namespace message {
namespace csserver {
class s2g_register_serverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s2g_register_server> _instance;
} _s2g_register_server_default_instance_;
class s2c_data_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s2c_data_message> _instance;
} _s2c_data_message_default_instance_;
class s2c_multi_data_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s2c_multi_data_message> _instance;
} _s2c_multi_data_message_default_instance_;
class s2c_kickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s2c_kick> _instance;
} _s2c_kick_default_instance_;
class s2c_multi_kickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s2c_multi_kick> _instance;
} _s2c_multi_kick_default_instance_;
class s2c_setclientlevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s2c_setclientlevel> _instance;
} _s2c_setclientlevel_default_instance_;
class s2c_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<s2c_message> _instance;
} _s2c_message_default_instance_;
class c2s_client_connectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<c2s_client_connected> _instance;
} _c2s_client_connected_default_instance_;
class c2s_client_disconnectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<c2s_client_disconnected> _instance;
} _c2s_client_disconnected_default_instance_;
class c2s_client_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<c2s_client_data> _instance;
} _c2s_client_data_default_instance_;
class g2s_register_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<g2s_register_response> _instance;
} _g2s_register_response_default_instance_;
class c2s_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<c2s_message> _instance;
} _c2s_message_default_instance_;
}  // namespace csserver
}  // namespace message
}  // namespace network
}  // namespace starlit
}  // namespace com
static void InitDefaultss2g_register_server_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_s2g_register_server_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::s2g_register_server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::s2g_register_server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_s2g_register_server_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultss2g_register_server_ServerSessionMessage_2eproto}, {}};

static void InitDefaultss2c_data_message_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_s2c_data_message_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::s2c_data_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::s2c_data_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_s2c_data_message_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultss2c_data_message_ServerSessionMessage_2eproto}, {}};

static void InitDefaultss2c_multi_data_message_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_s2c_multi_data_message_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::s2c_multi_data_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::s2c_multi_data_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_s2c_multi_data_message_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultss2c_multi_data_message_ServerSessionMessage_2eproto}, {}};

static void InitDefaultss2c_kick_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_s2c_kick_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::s2c_kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::s2c_kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_s2c_kick_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultss2c_kick_ServerSessionMessage_2eproto}, {}};

static void InitDefaultss2c_multi_kick_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_s2c_multi_kick_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::s2c_multi_kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::s2c_multi_kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_s2c_multi_kick_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultss2c_multi_kick_ServerSessionMessage_2eproto}, {}};

static void InitDefaultss2c_setclientlevel_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_s2c_setclientlevel_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::s2c_setclientlevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::s2c_setclientlevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_s2c_setclientlevel_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultss2c_setclientlevel_ServerSessionMessage_2eproto}, {}};

static void InitDefaultss2c_message_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_s2c_message_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::s2c_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::s2c_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_s2c_message_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultss2c_message_ServerSessionMessage_2eproto}, {
      &scc_info_s2c_data_message_ServerSessionMessage_2eproto.base,
      &scc_info_s2c_multi_data_message_ServerSessionMessage_2eproto.base,
      &scc_info_s2c_kick_ServerSessionMessage_2eproto.base,
      &scc_info_s2c_multi_kick_ServerSessionMessage_2eproto.base,
      &scc_info_s2c_setclientlevel_ServerSessionMessage_2eproto.base,
      &scc_info_s2g_register_server_ServerSessionMessage_2eproto.base,}};

static void InitDefaultsc2s_client_connected_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_c2s_client_connected_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::c2s_client_connected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::c2s_client_connected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_c2s_client_connected_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsc2s_client_connected_ServerSessionMessage_2eproto}, {}};

static void InitDefaultsc2s_client_disconnected_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_c2s_client_disconnected_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::c2s_client_disconnected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::c2s_client_disconnected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_c2s_client_disconnected_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsc2s_client_disconnected_ServerSessionMessage_2eproto}, {}};

static void InitDefaultsc2s_client_data_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_c2s_client_data_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::c2s_client_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::c2s_client_data::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_c2s_client_data_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsc2s_client_data_ServerSessionMessage_2eproto}, {}};

static void InitDefaultsg2s_register_response_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_g2s_register_response_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::g2s_register_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::g2s_register_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_g2s_register_response_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsg2s_register_response_ServerSessionMessage_2eproto}, {}};

static void InitDefaultsc2s_message_ServerSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::csserver::_c2s_message_default_instance_;
    new (ptr) ::com::starlit::network::message::csserver::c2s_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::csserver::c2s_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_c2s_message_ServerSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsc2s_message_ServerSessionMessage_2eproto}, {
      &scc_info_c2s_client_connected_ServerSessionMessage_2eproto.base,
      &scc_info_c2s_client_disconnected_ServerSessionMessage_2eproto.base,
      &scc_info_c2s_client_data_ServerSessionMessage_2eproto.base,
      &scc_info_g2s_register_response_ServerSessionMessage_2eproto.base,}};

namespace com {
namespace starlit {
namespace network {
namespace message {
namespace csserver {

// ===================================================================

void s2g_register_server::InitAsDefaultInstance() {
}
class s2g_register_server::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s2g_register_server::kServernameFieldNumber;
const int s2g_register_server::kIsdefaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s2g_register_server::s2g_register_server()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.s2g_register_server)
}
s2g_register_server::s2g_register_server(const s2g_register_server& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servername().size() > 0) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  isdefault_ = from.isdefault_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.s2g_register_server)
}

void s2g_register_server::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_s2g_register_server_ServerSessionMessage_2eproto.base);
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isdefault_ = false;
}

s2g_register_server::~s2g_register_server() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.s2g_register_server)
  SharedDtor();
}

void s2g_register_server::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void s2g_register_server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2g_register_server& s2g_register_server::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_s2g_register_server_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void s2g_register_server::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.s2g_register_server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isdefault_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* s2g_register_server::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<s2g_register_server*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string servername = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_servername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool isdefault = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_isdefault(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool s2g_register_server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.s2g_register_server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string servername = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.starlit.network.message.csserver.s2g_register_server.servername"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isdefault = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.s2g_register_server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.s2g_register_server)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void s2g_register_server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.s2g_register_server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string servername = 1;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.starlit.network.message.csserver.s2g_register_server.servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servername(), output);
  }

  // bool isdefault = 2;
  if (this->isdefault() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdefault(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.s2g_register_server)
}

size_t s2g_register_server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.s2g_register_server)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string servername = 1;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // bool isdefault = 2;
  if (this->isdefault() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2g_register_server::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s2g_register_server*>(&from));
}

void s2g_register_server::MergeFrom(const s2g_register_server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.s2g_register_server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.isdefault() != 0) {
    set_isdefault(from.isdefault());
  }
}

void s2g_register_server::CopyFrom(const s2g_register_server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.s2g_register_server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2g_register_server::IsInitialized() const {
  return true;
}

void s2g_register_server::Swap(s2g_register_server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s2g_register_server::InternalSwap(s2g_register_server* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  servername_.Swap(&other->servername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isdefault_, other->isdefault_);
}

::std::string s2g_register_server::GetTypeName() const {
  return "com.starlit.network.message.csserver.s2g_register_server";
}


// ===================================================================

void s2c_data_message::InitAsDefaultInstance() {
}
class s2c_data_message::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s2c_data_message::kNetworkidFieldNumber;
const int s2c_data_message::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s2c_data_message::s2c_data_message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.s2c_data_message)
}
s2c_data_message::s2c_data_message(const s2c_data_message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  networkid_ = from.networkid_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.s2c_data_message)
}

void s2c_data_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_s2c_data_message_ServerSessionMessage_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networkid_ = PROTOBUF_LONGLONG(0);
}

s2c_data_message::~s2c_data_message() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.s2c_data_message)
  SharedDtor();
}

void s2c_data_message::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void s2c_data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2c_data_message& s2c_data_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_s2c_data_message_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void s2c_data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.s2c_data_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networkid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* s2c_data_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<s2c_data_message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_networkid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool s2c_data_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.s2c_data_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &networkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.s2c_data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.s2c_data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void s2c_data_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.s2c_data_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->networkid(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.s2c_data_message)
}

size_t s2c_data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.s2c_data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->networkid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2c_data_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s2c_data_message*>(&from));
}

void s2c_data_message::MergeFrom(const s2c_data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.s2c_data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.networkid() != 0) {
    set_networkid(from.networkid());
  }
}

void s2c_data_message::CopyFrom(const s2c_data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.s2c_data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_data_message::IsInitialized() const {
  return true;
}

void s2c_data_message::Swap(s2c_data_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s2c_data_message::InternalSwap(s2c_data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(networkid_, other->networkid_);
}

::std::string s2c_data_message::GetTypeName() const {
  return "com.starlit.network.message.csserver.s2c_data_message";
}


// ===================================================================

void s2c_multi_data_message::InitAsDefaultInstance() {
}
class s2c_multi_data_message::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s2c_multi_data_message::kNetworkidsFieldNumber;
const int s2c_multi_data_message::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s2c_multi_data_message::s2c_multi_data_message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.s2c_multi_data_message)
}
s2c_multi_data_message::s2c_multi_data_message(const s2c_multi_data_message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      networkids_(from.networkids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.s2c_multi_data_message)
}

void s2c_multi_data_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_s2c_multi_data_message_ServerSessionMessage_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

s2c_multi_data_message::~s2c_multi_data_message() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.s2c_multi_data_message)
  SharedDtor();
}

void s2c_multi_data_message::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void s2c_multi_data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2c_multi_data_message& s2c_multi_data_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_s2c_multi_data_message_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void s2c_multi_data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.s2c_multi_data_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkids_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* s2c_multi_data_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<s2c_multi_data_message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int64 networkids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_networkids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_networkids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool s2c_multi_data_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.s2c_multi_data_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 networkids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_networkids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_networkids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.s2c_multi_data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.s2c_multi_data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void s2c_multi_data_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.s2c_multi_data_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 networkids = 1;
  if (this->networkids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_networkids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->networkids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->networkids(i), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.s2c_multi_data_message)
}

size_t s2c_multi_data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.s2c_multi_data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 networkids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->networkids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _networkids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2c_multi_data_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s2c_multi_data_message*>(&from));
}

void s2c_multi_data_message::MergeFrom(const s2c_multi_data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.s2c_multi_data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  networkids_.MergeFrom(from.networkids_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void s2c_multi_data_message::CopyFrom(const s2c_multi_data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.s2c_multi_data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_multi_data_message::IsInitialized() const {
  return true;
}

void s2c_multi_data_message::Swap(s2c_multi_data_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s2c_multi_data_message::InternalSwap(s2c_multi_data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  networkids_.InternalSwap(&other->networkids_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string s2c_multi_data_message::GetTypeName() const {
  return "com.starlit.network.message.csserver.s2c_multi_data_message";
}


// ===================================================================

void s2c_kick::InitAsDefaultInstance() {
}
class s2c_kick::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s2c_kick::kNetworkidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s2c_kick::s2c_kick()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.s2c_kick)
}
s2c_kick::s2c_kick(const s2c_kick& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  networkid_ = from.networkid_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.s2c_kick)
}

void s2c_kick::SharedCtor() {
  networkid_ = PROTOBUF_LONGLONG(0);
}

s2c_kick::~s2c_kick() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.s2c_kick)
  SharedDtor();
}

void s2c_kick::SharedDtor() {
}

void s2c_kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2c_kick& s2c_kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_s2c_kick_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void s2c_kick::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.s2c_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* s2c_kick::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<s2c_kick*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_networkid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool s2c_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.s2c_kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &networkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.s2c_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.s2c_kick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void s2c_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.s2c_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->networkid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.s2c_kick)
}

size_t s2c_kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.s2c_kick)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->networkid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2c_kick::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s2c_kick*>(&from));
}

void s2c_kick::MergeFrom(const s2c_kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.s2c_kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkid() != 0) {
    set_networkid(from.networkid());
  }
}

void s2c_kick::CopyFrom(const s2c_kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.s2c_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_kick::IsInitialized() const {
  return true;
}

void s2c_kick::Swap(s2c_kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s2c_kick::InternalSwap(s2c_kick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(networkid_, other->networkid_);
}

::std::string s2c_kick::GetTypeName() const {
  return "com.starlit.network.message.csserver.s2c_kick";
}


// ===================================================================

void s2c_multi_kick::InitAsDefaultInstance() {
}
class s2c_multi_kick::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s2c_multi_kick::kNetworkidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s2c_multi_kick::s2c_multi_kick()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.s2c_multi_kick)
}
s2c_multi_kick::s2c_multi_kick(const s2c_multi_kick& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      networkids_(from.networkids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.s2c_multi_kick)
}

void s2c_multi_kick::SharedCtor() {
}

s2c_multi_kick::~s2c_multi_kick() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.s2c_multi_kick)
  SharedDtor();
}

void s2c_multi_kick::SharedDtor() {
}

void s2c_multi_kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2c_multi_kick& s2c_multi_kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_s2c_multi_kick_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void s2c_multi_kick::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.s2c_multi_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* s2c_multi_kick::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<s2c_multi_kick*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int64 networkids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt64Parser;
          object = msg->mutable_networkids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_networkids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool s2c_multi_kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.s2c_multi_kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 networkids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_networkids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_networkids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.s2c_multi_kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.s2c_multi_kick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void s2c_multi_kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.s2c_multi_kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 networkids = 1;
  if (this->networkids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_networkids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->networkids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->networkids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.s2c_multi_kick)
}

size_t s2c_multi_kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.s2c_multi_kick)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 networkids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->networkids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _networkids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2c_multi_kick::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s2c_multi_kick*>(&from));
}

void s2c_multi_kick::MergeFrom(const s2c_multi_kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.s2c_multi_kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  networkids_.MergeFrom(from.networkids_);
}

void s2c_multi_kick::CopyFrom(const s2c_multi_kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.s2c_multi_kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_multi_kick::IsInitialized() const {
  return true;
}

void s2c_multi_kick::Swap(s2c_multi_kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s2c_multi_kick::InternalSwap(s2c_multi_kick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  networkids_.InternalSwap(&other->networkids_);
}

::std::string s2c_multi_kick::GetTypeName() const {
  return "com.starlit.network.message.csserver.s2c_multi_kick";
}


// ===================================================================

void s2c_setclientlevel::InitAsDefaultInstance() {
}
class s2c_setclientlevel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s2c_setclientlevel::kNetworkidFieldNumber;
const int s2c_setclientlevel::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s2c_setclientlevel::s2c_setclientlevel()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.s2c_setclientlevel)
}
s2c_setclientlevel::s2c_setclientlevel(const s2c_setclientlevel& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&networkid_, &from.networkid_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&networkid_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.s2c_setclientlevel)
}

void s2c_setclientlevel::SharedCtor() {
  ::memset(&networkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&networkid_)) + sizeof(right_));
}

s2c_setclientlevel::~s2c_setclientlevel() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.s2c_setclientlevel)
  SharedDtor();
}

void s2c_setclientlevel::SharedDtor() {
}

void s2c_setclientlevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2c_setclientlevel& s2c_setclientlevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_s2c_setclientlevel_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void s2c_setclientlevel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.s2c_setclientlevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&networkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&networkid_)) + sizeof(right_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* s2c_setclientlevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<s2c_setclientlevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_networkid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 right = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_right(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool s2c_setclientlevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.s2c_setclientlevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &networkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.s2c_setclientlevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.s2c_setclientlevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void s2c_setclientlevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.s2c_setclientlevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->networkid(), output);
  }

  // int32 right = 2;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->right(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.s2c_setclientlevel)
}

size_t s2c_setclientlevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.s2c_setclientlevel)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->networkid());
  }

  // int32 right = 2;
  if (this->right() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2c_setclientlevel::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s2c_setclientlevel*>(&from));
}

void s2c_setclientlevel::MergeFrom(const s2c_setclientlevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.s2c_setclientlevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkid() != 0) {
    set_networkid(from.networkid());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void s2c_setclientlevel::CopyFrom(const s2c_setclientlevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.s2c_setclientlevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_setclientlevel::IsInitialized() const {
  return true;
}

void s2c_setclientlevel::Swap(s2c_setclientlevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s2c_setclientlevel::InternalSwap(s2c_setclientlevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(networkid_, other->networkid_);
  swap(right_, other->right_);
}

::std::string s2c_setclientlevel::GetTypeName() const {
  return "com.starlit.network.message.csserver.s2c_setclientlevel";
}


// ===================================================================

void s2c_message::InitAsDefaultInstance() {
  ::com::starlit::network::message::csserver::_s2c_message_default_instance_._instance.get_mutable()->data_ = const_cast< ::com::starlit::network::message::csserver::s2c_data_message*>(
      ::com::starlit::network::message::csserver::s2c_data_message::internal_default_instance());
  ::com::starlit::network::message::csserver::_s2c_message_default_instance_._instance.get_mutable()->multi_data_ = const_cast< ::com::starlit::network::message::csserver::s2c_multi_data_message*>(
      ::com::starlit::network::message::csserver::s2c_multi_data_message::internal_default_instance());
  ::com::starlit::network::message::csserver::_s2c_message_default_instance_._instance.get_mutable()->kick_ = const_cast< ::com::starlit::network::message::csserver::s2c_kick*>(
      ::com::starlit::network::message::csserver::s2c_kick::internal_default_instance());
  ::com::starlit::network::message::csserver::_s2c_message_default_instance_._instance.get_mutable()->multi_kick_ = const_cast< ::com::starlit::network::message::csserver::s2c_multi_kick*>(
      ::com::starlit::network::message::csserver::s2c_multi_kick::internal_default_instance());
  ::com::starlit::network::message::csserver::_s2c_message_default_instance_._instance.get_mutable()->setclientlevel_ = const_cast< ::com::starlit::network::message::csserver::s2c_setclientlevel*>(
      ::com::starlit::network::message::csserver::s2c_setclientlevel::internal_default_instance());
  ::com::starlit::network::message::csserver::_s2c_message_default_instance_._instance.get_mutable()->register_server_ = const_cast< ::com::starlit::network::message::csserver::s2g_register_server*>(
      ::com::starlit::network::message::csserver::s2g_register_server::internal_default_instance());
}
class s2c_message::HasBitSetters {
 public:
  static const ::com::starlit::network::message::csserver::s2c_data_message& data(const s2c_message* msg);
  static const ::com::starlit::network::message::csserver::s2c_multi_data_message& multi_data(const s2c_message* msg);
  static const ::com::starlit::network::message::csserver::s2c_kick& kick(const s2c_message* msg);
  static const ::com::starlit::network::message::csserver::s2c_multi_kick& multi_kick(const s2c_message* msg);
  static const ::com::starlit::network::message::csserver::s2c_setclientlevel& setclientlevel(const s2c_message* msg);
  static const ::com::starlit::network::message::csserver::s2g_register_server& register_server(const s2c_message* msg);
};

const ::com::starlit::network::message::csserver::s2c_data_message&
s2c_message::HasBitSetters::data(const s2c_message* msg) {
  return *msg->data_;
}
const ::com::starlit::network::message::csserver::s2c_multi_data_message&
s2c_message::HasBitSetters::multi_data(const s2c_message* msg) {
  return *msg->multi_data_;
}
const ::com::starlit::network::message::csserver::s2c_kick&
s2c_message::HasBitSetters::kick(const s2c_message* msg) {
  return *msg->kick_;
}
const ::com::starlit::network::message::csserver::s2c_multi_kick&
s2c_message::HasBitSetters::multi_kick(const s2c_message* msg) {
  return *msg->multi_kick_;
}
const ::com::starlit::network::message::csserver::s2c_setclientlevel&
s2c_message::HasBitSetters::setclientlevel(const s2c_message* msg) {
  return *msg->setclientlevel_;
}
const ::com::starlit::network::message::csserver::s2g_register_server&
s2c_message::HasBitSetters::register_server(const s2c_message* msg) {
  return *msg->register_server_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int s2c_message::kDataFieldNumber;
const int s2c_message::kMultiDataFieldNumber;
const int s2c_message::kKickFieldNumber;
const int s2c_message::kMultiKickFieldNumber;
const int s2c_message::kSetclientlevelFieldNumber;
const int s2c_message::kRegisterServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

s2c_message::s2c_message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.s2c_message)
}
s2c_message::s2c_message(const s2c_message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::com::starlit::network::message::csserver::s2c_data_message(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from.has_multi_data()) {
    multi_data_ = new ::com::starlit::network::message::csserver::s2c_multi_data_message(*from.multi_data_);
  } else {
    multi_data_ = nullptr;
  }
  if (from.has_kick()) {
    kick_ = new ::com::starlit::network::message::csserver::s2c_kick(*from.kick_);
  } else {
    kick_ = nullptr;
  }
  if (from.has_multi_kick()) {
    multi_kick_ = new ::com::starlit::network::message::csserver::s2c_multi_kick(*from.multi_kick_);
  } else {
    multi_kick_ = nullptr;
  }
  if (from.has_setclientlevel()) {
    setclientlevel_ = new ::com::starlit::network::message::csserver::s2c_setclientlevel(*from.setclientlevel_);
  } else {
    setclientlevel_ = nullptr;
  }
  if (from.has_register_server()) {
    register_server_ = new ::com::starlit::network::message::csserver::s2g_register_server(*from.register_server_);
  } else {
    register_server_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.s2c_message)
}

void s2c_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_s2c_message_ServerSessionMessage_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&register_server_) -
      reinterpret_cast<char*>(&data_)) + sizeof(register_server_));
}

s2c_message::~s2c_message() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.s2c_message)
  SharedDtor();
}

void s2c_message::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete multi_data_;
  if (this != internal_default_instance()) delete kick_;
  if (this != internal_default_instance()) delete multi_kick_;
  if (this != internal_default_instance()) delete setclientlevel_;
  if (this != internal_default_instance()) delete register_server_;
}

void s2c_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const s2c_message& s2c_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_s2c_message_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void s2c_message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.s2c_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multi_data_ != nullptr) {
    delete multi_data_;
  }
  multi_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && kick_ != nullptr) {
    delete kick_;
  }
  kick_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multi_kick_ != nullptr) {
    delete multi_kick_;
  }
  multi_kick_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && setclientlevel_ != nullptr) {
    delete setclientlevel_;
  }
  setclientlevel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && register_server_ != nullptr) {
    delete register_server_;
  }
  register_server_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* s2c_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<s2c_message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.starlit.network.message.csserver.s2c_data_message data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::s2c_data_message::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.csserver.s2c_multi_data_message multi_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::s2c_multi_data_message::_InternalParse;
        object = msg->mutable_multi_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.csserver.s2c_kick kick = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::s2c_kick::_InternalParse;
        object = msg->mutable_kick();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.csserver.s2c_multi_kick multi_kick = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::s2c_multi_kick::_InternalParse;
        object = msg->mutable_multi_kick();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.csserver.s2c_setclientlevel setclientlevel = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::s2c_setclientlevel::_InternalParse;
        object = msg->mutable_setclientlevel();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.csserver.s2g_register_server register_server = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::s2g_register_server::_InternalParse;
        object = msg->mutable_register_server();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool s2c_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.s2c_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.starlit.network.message.csserver.s2c_data_message data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.csserver.s2c_multi_data_message multi_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multi_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.csserver.s2c_kick kick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.csserver.s2c_multi_kick multi_kick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multi_kick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.csserver.s2c_setclientlevel setclientlevel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_setclientlevel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.csserver.s2g_register_server register_server = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.s2c_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.s2c_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void s2c_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.s2c_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.starlit.network.message.csserver.s2c_data_message data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::data(this), output);
  }

  // .com.starlit.network.message.csserver.s2c_multi_data_message multi_data = 2;
  if (this->has_multi_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::multi_data(this), output);
  }

  // .com.starlit.network.message.csserver.s2c_kick kick = 3;
  if (this->has_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::kick(this), output);
  }

  // .com.starlit.network.message.csserver.s2c_multi_kick multi_kick = 4;
  if (this->has_multi_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::multi_kick(this), output);
  }

  // .com.starlit.network.message.csserver.s2c_setclientlevel setclientlevel = 5;
  if (this->has_setclientlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::setclientlevel(this), output);
  }

  // .com.starlit.network.message.csserver.s2g_register_server register_server = 6;
  if (this->has_register_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, HasBitSetters::register_server(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.s2c_message)
}

size_t s2c_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.s2c_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.starlit.network.message.csserver.s2c_data_message data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .com.starlit.network.message.csserver.s2c_multi_data_message multi_data = 2;
  if (this->has_multi_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *multi_data_);
  }

  // .com.starlit.network.message.csserver.s2c_kick kick = 3;
  if (this->has_kick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kick_);
  }

  // .com.starlit.network.message.csserver.s2c_multi_kick multi_kick = 4;
  if (this->has_multi_kick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *multi_kick_);
  }

  // .com.starlit.network.message.csserver.s2c_setclientlevel setclientlevel = 5;
  if (this->has_setclientlevel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *setclientlevel_);
  }

  // .com.starlit.network.message.csserver.s2g_register_server register_server = 6;
  if (this->has_register_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *register_server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void s2c_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const s2c_message*>(&from));
}

void s2c_message::MergeFrom(const s2c_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.s2c_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::com::starlit::network::message::csserver::s2c_data_message::MergeFrom(from.data());
  }
  if (from.has_multi_data()) {
    mutable_multi_data()->::com::starlit::network::message::csserver::s2c_multi_data_message::MergeFrom(from.multi_data());
  }
  if (from.has_kick()) {
    mutable_kick()->::com::starlit::network::message::csserver::s2c_kick::MergeFrom(from.kick());
  }
  if (from.has_multi_kick()) {
    mutable_multi_kick()->::com::starlit::network::message::csserver::s2c_multi_kick::MergeFrom(from.multi_kick());
  }
  if (from.has_setclientlevel()) {
    mutable_setclientlevel()->::com::starlit::network::message::csserver::s2c_setclientlevel::MergeFrom(from.setclientlevel());
  }
  if (from.has_register_server()) {
    mutable_register_server()->::com::starlit::network::message::csserver::s2g_register_server::MergeFrom(from.register_server());
  }
}

void s2c_message::CopyFrom(const s2c_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.s2c_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool s2c_message::IsInitialized() const {
  return true;
}

void s2c_message::Swap(s2c_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void s2c_message::InternalSwap(s2c_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(multi_data_, other->multi_data_);
  swap(kick_, other->kick_);
  swap(multi_kick_, other->multi_kick_);
  swap(setclientlevel_, other->setclientlevel_);
  swap(register_server_, other->register_server_);
}

::std::string s2c_message::GetTypeName() const {
  return "com.starlit.network.message.csserver.s2c_message";
}


// ===================================================================

void c2s_client_connected::InitAsDefaultInstance() {
}
class c2s_client_connected::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c2s_client_connected::kNetworkidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c2s_client_connected::c2s_client_connected()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.c2s_client_connected)
}
c2s_client_connected::c2s_client_connected(const c2s_client_connected& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  networkid_ = from.networkid_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.c2s_client_connected)
}

void c2s_client_connected::SharedCtor() {
  networkid_ = PROTOBUF_LONGLONG(0);
}

c2s_client_connected::~c2s_client_connected() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.c2s_client_connected)
  SharedDtor();
}

void c2s_client_connected::SharedDtor() {
}

void c2s_client_connected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const c2s_client_connected& c2s_client_connected::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_c2s_client_connected_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void c2s_client_connected::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.c2s_client_connected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* c2s_client_connected::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<c2s_client_connected*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_networkid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool c2s_client_connected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.c2s_client_connected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &networkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.c2s_client_connected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.c2s_client_connected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void c2s_client_connected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.c2s_client_connected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->networkid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.c2s_client_connected)
}

size_t c2s_client_connected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.c2s_client_connected)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->networkid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void c2s_client_connected::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const c2s_client_connected*>(&from));
}

void c2s_client_connected::MergeFrom(const c2s_client_connected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.c2s_client_connected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkid() != 0) {
    set_networkid(from.networkid());
  }
}

void c2s_client_connected::CopyFrom(const c2s_client_connected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.c2s_client_connected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_client_connected::IsInitialized() const {
  return true;
}

void c2s_client_connected::Swap(c2s_client_connected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c2s_client_connected::InternalSwap(c2s_client_connected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(networkid_, other->networkid_);
}

::std::string c2s_client_connected::GetTypeName() const {
  return "com.starlit.network.message.csserver.c2s_client_connected";
}


// ===================================================================

void c2s_client_disconnected::InitAsDefaultInstance() {
}
class c2s_client_disconnected::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c2s_client_disconnected::kNetworkidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c2s_client_disconnected::c2s_client_disconnected()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.c2s_client_disconnected)
}
c2s_client_disconnected::c2s_client_disconnected(const c2s_client_disconnected& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  networkid_ = from.networkid_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.c2s_client_disconnected)
}

void c2s_client_disconnected::SharedCtor() {
  networkid_ = PROTOBUF_LONGLONG(0);
}

c2s_client_disconnected::~c2s_client_disconnected() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.c2s_client_disconnected)
  SharedDtor();
}

void c2s_client_disconnected::SharedDtor() {
}

void c2s_client_disconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const c2s_client_disconnected& c2s_client_disconnected::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_c2s_client_disconnected_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void c2s_client_disconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.c2s_client_disconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networkid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* c2s_client_disconnected::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<c2s_client_disconnected*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_networkid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool c2s_client_disconnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.c2s_client_disconnected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &networkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.c2s_client_disconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.c2s_client_disconnected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void c2s_client_disconnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.c2s_client_disconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->networkid(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.c2s_client_disconnected)
}

size_t c2s_client_disconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.c2s_client_disconnected)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->networkid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void c2s_client_disconnected::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const c2s_client_disconnected*>(&from));
}

void c2s_client_disconnected::MergeFrom(const c2s_client_disconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.c2s_client_disconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.networkid() != 0) {
    set_networkid(from.networkid());
  }
}

void c2s_client_disconnected::CopyFrom(const c2s_client_disconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.c2s_client_disconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_client_disconnected::IsInitialized() const {
  return true;
}

void c2s_client_disconnected::Swap(c2s_client_disconnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c2s_client_disconnected::InternalSwap(c2s_client_disconnected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(networkid_, other->networkid_);
}

::std::string c2s_client_disconnected::GetTypeName() const {
  return "com.starlit.network.message.csserver.c2s_client_disconnected";
}


// ===================================================================

void c2s_client_data::InitAsDefaultInstance() {
}
class c2s_client_data::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c2s_client_data::kNetworkidFieldNumber;
const int c2s_client_data::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c2s_client_data::c2s_client_data()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.c2s_client_data)
}
c2s_client_data::c2s_client_data(const c2s_client_data& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  networkid_ = from.networkid_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.c2s_client_data)
}

void c2s_client_data::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_c2s_client_data_ServerSessionMessage_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networkid_ = PROTOBUF_LONGLONG(0);
}

c2s_client_data::~c2s_client_data() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.c2s_client_data)
  SharedDtor();
}

void c2s_client_data::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void c2s_client_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const c2s_client_data& c2s_client_data::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_c2s_client_data_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void c2s_client_data::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.c2s_client_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  networkid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* c2s_client_data::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<c2s_client_data*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_networkid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool c2s_client_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.c2s_client_data)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 networkid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &networkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.c2s_client_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.c2s_client_data)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void c2s_client_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.c2s_client_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->networkid(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.c2s_client_data)
}

size_t c2s_client_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.c2s_client_data)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 networkid = 1;
  if (this->networkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->networkid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void c2s_client_data::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const c2s_client_data*>(&from));
}

void c2s_client_data::MergeFrom(const c2s_client_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.c2s_client_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.networkid() != 0) {
    set_networkid(from.networkid());
  }
}

void c2s_client_data::CopyFrom(const c2s_client_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.c2s_client_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_client_data::IsInitialized() const {
  return true;
}

void c2s_client_data::Swap(c2s_client_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c2s_client_data::InternalSwap(c2s_client_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(networkid_, other->networkid_);
}

::std::string c2s_client_data::GetTypeName() const {
  return "com.starlit.network.message.csserver.c2s_client_data";
}


// ===================================================================

void g2s_register_response::InitAsDefaultInstance() {
}
class g2s_register_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int g2s_register_response::kRegisterokFieldNumber;
const int g2s_register_response::kErrorcodeFieldNumber;
const int g2s_register_response::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

g2s_register_response::g2s_register_response()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.g2s_register_response)
}
g2s_register_response::g2s_register_response(const g2s_register_response& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  ::memcpy(&registerok_, &from.registerok_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&registerok_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.g2s_register_response)
}

void g2s_register_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_g2s_register_response_ServerSessionMessage_2eproto.base);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&registerok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&registerok_)) + sizeof(errorcode_));
}

g2s_register_response::~g2s_register_response() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.g2s_register_response)
  SharedDtor();
}

void g2s_register_response::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void g2s_register_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const g2s_register_response& g2s_register_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_g2s_register_response_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void g2s_register_response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.g2s_register_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&registerok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&registerok_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* g2s_register_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<g2s_register_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool registerok = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_registerok(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 errorcode = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_errorcode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reason = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_reason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool g2s_register_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.g2s_register_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool registerok = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &registerok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 errorcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.starlit.network.message.csserver.g2s_register_response.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.g2s_register_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.g2s_register_response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void g2s_register_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.g2s_register_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool registerok = 1;
  if (this->registerok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->registerok(), output);
  }

  // int32 errorcode = 2;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errorcode(), output);
  }

  // string reason = 3;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.starlit.network.message.csserver.g2s_register_response.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.g2s_register_response)
}

size_t g2s_register_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.g2s_register_response)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // bool registerok = 1;
  if (this->registerok() != 0) {
    total_size += 1 + 1;
  }

  // int32 errorcode = 2;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void g2s_register_response::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const g2s_register_response*>(&from));
}

void g2s_register_response::MergeFrom(const g2s_register_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.g2s_register_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.registerok() != 0) {
    set_registerok(from.registerok());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void g2s_register_response::CopyFrom(const g2s_register_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.g2s_register_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool g2s_register_response::IsInitialized() const {
  return true;
}

void g2s_register_response::Swap(g2s_register_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void g2s_register_response::InternalSwap(g2s_register_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(registerok_, other->registerok_);
  swap(errorcode_, other->errorcode_);
}

::std::string g2s_register_response::GetTypeName() const {
  return "com.starlit.network.message.csserver.g2s_register_response";
}


// ===================================================================

void c2s_message::InitAsDefaultInstance() {
  ::com::starlit::network::message::csserver::_c2s_message_default_instance_._instance.get_mutable()->client_connected_ = const_cast< ::com::starlit::network::message::csserver::c2s_client_connected*>(
      ::com::starlit::network::message::csserver::c2s_client_connected::internal_default_instance());
  ::com::starlit::network::message::csserver::_c2s_message_default_instance_._instance.get_mutable()->client_diconnected_ = const_cast< ::com::starlit::network::message::csserver::c2s_client_disconnected*>(
      ::com::starlit::network::message::csserver::c2s_client_disconnected::internal_default_instance());
  ::com::starlit::network::message::csserver::_c2s_message_default_instance_._instance.get_mutable()->client_data_ = const_cast< ::com::starlit::network::message::csserver::c2s_client_data*>(
      ::com::starlit::network::message::csserver::c2s_client_data::internal_default_instance());
  ::com::starlit::network::message::csserver::_c2s_message_default_instance_._instance.get_mutable()->register_response_ = const_cast< ::com::starlit::network::message::csserver::g2s_register_response*>(
      ::com::starlit::network::message::csserver::g2s_register_response::internal_default_instance());
}
class c2s_message::HasBitSetters {
 public:
  static const ::com::starlit::network::message::csserver::c2s_client_connected& client_connected(const c2s_message* msg);
  static const ::com::starlit::network::message::csserver::c2s_client_disconnected& client_diconnected(const c2s_message* msg);
  static const ::com::starlit::network::message::csserver::c2s_client_data& client_data(const c2s_message* msg);
  static const ::com::starlit::network::message::csserver::g2s_register_response& register_response(const c2s_message* msg);
};

const ::com::starlit::network::message::csserver::c2s_client_connected&
c2s_message::HasBitSetters::client_connected(const c2s_message* msg) {
  return *msg->client_connected_;
}
const ::com::starlit::network::message::csserver::c2s_client_disconnected&
c2s_message::HasBitSetters::client_diconnected(const c2s_message* msg) {
  return *msg->client_diconnected_;
}
const ::com::starlit::network::message::csserver::c2s_client_data&
c2s_message::HasBitSetters::client_data(const c2s_message* msg) {
  return *msg->client_data_;
}
const ::com::starlit::network::message::csserver::g2s_register_response&
c2s_message::HasBitSetters::register_response(const c2s_message* msg) {
  return *msg->register_response_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c2s_message::kClientConnectedFieldNumber;
const int c2s_message::kClientDiconnectedFieldNumber;
const int c2s_message::kClientDataFieldNumber;
const int c2s_message::kRegisterResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c2s_message::c2s_message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.csserver.c2s_message)
}
c2s_message::c2s_message(const c2s_message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_client_connected()) {
    client_connected_ = new ::com::starlit::network::message::csserver::c2s_client_connected(*from.client_connected_);
  } else {
    client_connected_ = nullptr;
  }
  if (from.has_client_diconnected()) {
    client_diconnected_ = new ::com::starlit::network::message::csserver::c2s_client_disconnected(*from.client_diconnected_);
  } else {
    client_diconnected_ = nullptr;
  }
  if (from.has_client_data()) {
    client_data_ = new ::com::starlit::network::message::csserver::c2s_client_data(*from.client_data_);
  } else {
    client_data_ = nullptr;
  }
  if (from.has_register_response()) {
    register_response_ = new ::com::starlit::network::message::csserver::g2s_register_response(*from.register_response_);
  } else {
    register_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.csserver.c2s_message)
}

void c2s_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_c2s_message_ServerSessionMessage_2eproto.base);
  ::memset(&client_connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&register_response_) -
      reinterpret_cast<char*>(&client_connected_)) + sizeof(register_response_));
}

c2s_message::~c2s_message() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.csserver.c2s_message)
  SharedDtor();
}

void c2s_message::SharedDtor() {
  if (this != internal_default_instance()) delete client_connected_;
  if (this != internal_default_instance()) delete client_diconnected_;
  if (this != internal_default_instance()) delete client_data_;
  if (this != internal_default_instance()) delete register_response_;
}

void c2s_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const c2s_message& c2s_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_c2s_message_ServerSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void c2s_message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.csserver.c2s_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && client_connected_ != nullptr) {
    delete client_connected_;
  }
  client_connected_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && client_diconnected_ != nullptr) {
    delete client_diconnected_;
  }
  client_diconnected_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && client_data_ != nullptr) {
    delete client_data_;
  }
  client_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && register_response_ != nullptr) {
    delete register_response_;
  }
  register_response_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* c2s_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<c2s_message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.starlit.network.message.csserver.c2s_client_connected client_connected = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::c2s_client_connected::_InternalParse;
        object = msg->mutable_client_connected();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.csserver.c2s_client_disconnected client_diconnected = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::c2s_client_disconnected::_InternalParse;
        object = msg->mutable_client_diconnected();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.csserver.c2s_client_data client_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::c2s_client_data::_InternalParse;
        object = msg->mutable_client_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.csserver.g2s_register_response register_response = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::csserver::g2s_register_response::_InternalParse;
        object = msg->mutable_register_response();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool c2s_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.csserver.c2s_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.starlit.network.message.csserver.c2s_client_connected client_connected = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_connected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.csserver.c2s_client_disconnected client_diconnected = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_diconnected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.csserver.c2s_client_data client_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.csserver.g2s_register_response register_response = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.csserver.c2s_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.csserver.c2s_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void c2s_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.csserver.c2s_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.starlit.network.message.csserver.c2s_client_connected client_connected = 1;
  if (this->has_client_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::client_connected(this), output);
  }

  // .com.starlit.network.message.csserver.c2s_client_disconnected client_diconnected = 2;
  if (this->has_client_diconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::client_diconnected(this), output);
  }

  // .com.starlit.network.message.csserver.c2s_client_data client_data = 3;
  if (this->has_client_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::client_data(this), output);
  }

  // .com.starlit.network.message.csserver.g2s_register_response register_response = 4;
  if (this->has_register_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::register_response(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.csserver.c2s_message)
}

size_t c2s_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.csserver.c2s_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.starlit.network.message.csserver.c2s_client_connected client_connected = 1;
  if (this->has_client_connected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_connected_);
  }

  // .com.starlit.network.message.csserver.c2s_client_disconnected client_diconnected = 2;
  if (this->has_client_diconnected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_diconnected_);
  }

  // .com.starlit.network.message.csserver.c2s_client_data client_data = 3;
  if (this->has_client_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *client_data_);
  }

  // .com.starlit.network.message.csserver.g2s_register_response register_response = 4;
  if (this->has_register_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *register_response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void c2s_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const c2s_message*>(&from));
}

void c2s_message::MergeFrom(const c2s_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.csserver.c2s_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_connected()) {
    mutable_client_connected()->::com::starlit::network::message::csserver::c2s_client_connected::MergeFrom(from.client_connected());
  }
  if (from.has_client_diconnected()) {
    mutable_client_diconnected()->::com::starlit::network::message::csserver::c2s_client_disconnected::MergeFrom(from.client_diconnected());
  }
  if (from.has_client_data()) {
    mutable_client_data()->::com::starlit::network::message::csserver::c2s_client_data::MergeFrom(from.client_data());
  }
  if (from.has_register_response()) {
    mutable_register_response()->::com::starlit::network::message::csserver::g2s_register_response::MergeFrom(from.register_response());
  }
}

void c2s_message::CopyFrom(const c2s_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.csserver.c2s_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2s_message::IsInitialized() const {
  return true;
}

void c2s_message::Swap(c2s_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c2s_message::InternalSwap(c2s_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(client_connected_, other->client_connected_);
  swap(client_diconnected_, other->client_diconnected_);
  swap(client_data_, other->client_data_);
  swap(register_response_, other->register_response_);
}

::std::string c2s_message::GetTypeName() const {
  return "com.starlit.network.message.csserver.c2s_message";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace csserver
}  // namespace message
}  // namespace network
}  // namespace starlit
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::s2g_register_server* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::s2g_register_server >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::s2g_register_server >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::s2c_data_message* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::s2c_data_message >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::s2c_data_message >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::s2c_multi_data_message* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::s2c_multi_data_message >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::s2c_multi_data_message >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::s2c_kick* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::s2c_kick >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::s2c_kick >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::s2c_multi_kick* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::s2c_multi_kick >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::s2c_multi_kick >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::s2c_setclientlevel* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::s2c_setclientlevel >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::s2c_setclientlevel >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::s2c_message* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::s2c_message >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::s2c_message >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::c2s_client_connected* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::c2s_client_connected >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::c2s_client_connected >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::c2s_client_disconnected* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::c2s_client_disconnected >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::c2s_client_disconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::c2s_client_data* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::c2s_client_data >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::c2s_client_data >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::g2s_register_response* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::g2s_register_response >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::g2s_register_response >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::csserver::c2s_message* Arena::CreateMaybeMessage< ::com::starlit::network::message::csserver::c2s_message >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::csserver::c2s_message >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
