// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientSessionMessage.proto

#ifndef PROTOBUF_INCLUDED_ClientSessionMessage_2eproto
#define PROTOBUF_INCLUDED_ClientSessionMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ClientSessionMessage_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientSessionMessage_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace com {
namespace starlit {
namespace network {
namespace message {
namespace client {
class c2g_data_message;
class c2g_data_messageDefaultTypeInternal;
extern c2g_data_messageDefaultTypeInternal _c2g_data_message_default_instance_;
class c2g_message;
class c2g_messageDefaultTypeInternal;
extern c2g_messageDefaultTypeInternal _c2g_message_default_instance_;
class c2g_ping_request;
class c2g_ping_requestDefaultTypeInternal;
extern c2g_ping_requestDefaultTypeInternal _c2g_ping_request_default_instance_;
class g2c_close;
class g2c_closeDefaultTypeInternal;
extern g2c_closeDefaultTypeInternal _g2c_close_default_instance_;
class g2c_data_message;
class g2c_data_messageDefaultTypeInternal;
extern g2c_data_messageDefaultTypeInternal _g2c_data_message_default_instance_;
class g2c_message;
class g2c_messageDefaultTypeInternal;
extern g2c_messageDefaultTypeInternal _g2c_message_default_instance_;
class g2c_ping_response;
class g2c_ping_responseDefaultTypeInternal;
extern g2c_ping_responseDefaultTypeInternal _g2c_ping_response_default_instance_;
class g2c_server_connected;
class g2c_server_connectedDefaultTypeInternal;
extern g2c_server_connectedDefaultTypeInternal _g2c_server_connected_default_instance_;
class g2c_server_disconnected;
class g2c_server_disconnectedDefaultTypeInternal;
extern g2c_server_disconnectedDefaultTypeInternal _g2c_server_disconnected_default_instance_;
}  // namespace client
}  // namespace message
}  // namespace network
}  // namespace starlit
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::starlit::network::message::client::c2g_data_message* Arena::CreateMaybeMessage<::com::starlit::network::message::client::c2g_data_message>(Arena*);
template<> ::com::starlit::network::message::client::c2g_message* Arena::CreateMaybeMessage<::com::starlit::network::message::client::c2g_message>(Arena*);
template<> ::com::starlit::network::message::client::c2g_ping_request* Arena::CreateMaybeMessage<::com::starlit::network::message::client::c2g_ping_request>(Arena*);
template<> ::com::starlit::network::message::client::g2c_close* Arena::CreateMaybeMessage<::com::starlit::network::message::client::g2c_close>(Arena*);
template<> ::com::starlit::network::message::client::g2c_data_message* Arena::CreateMaybeMessage<::com::starlit::network::message::client::g2c_data_message>(Arena*);
template<> ::com::starlit::network::message::client::g2c_message* Arena::CreateMaybeMessage<::com::starlit::network::message::client::g2c_message>(Arena*);
template<> ::com::starlit::network::message::client::g2c_ping_response* Arena::CreateMaybeMessage<::com::starlit::network::message::client::g2c_ping_response>(Arena*);
template<> ::com::starlit::network::message::client::g2c_server_connected* Arena::CreateMaybeMessage<::com::starlit::network::message::client::g2c_server_connected>(Arena*);
template<> ::com::starlit::network::message::client::g2c_server_disconnected* Arena::CreateMaybeMessage<::com::starlit::network::message::client::g2c_server_disconnected>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace starlit {
namespace network {
namespace message {
namespace client {

// ===================================================================

class c2g_data_message :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.c2g_data_message) */ {
 public:
  c2g_data_message();
  virtual ~c2g_data_message();

  c2g_data_message(const c2g_data_message& from);

  inline c2g_data_message& operator=(const c2g_data_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c2g_data_message(c2g_data_message&& from) noexcept
    : c2g_data_message() {
    *this = ::std::move(from);
  }

  inline c2g_data_message& operator=(c2g_data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const c2g_data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c2g_data_message* internal_default_instance() {
    return reinterpret_cast<const c2g_data_message*>(
               &_c2g_data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(c2g_data_message* other);
  friend void swap(c2g_data_message& a, c2g_data_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c2g_data_message* New() const final {
    return CreateMaybeMessage<c2g_data_message>(nullptr);
  }

  c2g_data_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<c2g_data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const c2g_data_message& from);
  void MergeFrom(const c2g_data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(c2g_data_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.c2g_data_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class c2g_ping_request :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.c2g_ping_request) */ {
 public:
  c2g_ping_request();
  virtual ~c2g_ping_request();

  c2g_ping_request(const c2g_ping_request& from);

  inline c2g_ping_request& operator=(const c2g_ping_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c2g_ping_request(c2g_ping_request&& from) noexcept
    : c2g_ping_request() {
    *this = ::std::move(from);
  }

  inline c2g_ping_request& operator=(c2g_ping_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const c2g_ping_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c2g_ping_request* internal_default_instance() {
    return reinterpret_cast<const c2g_ping_request*>(
               &_c2g_ping_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(c2g_ping_request* other);
  friend void swap(c2g_ping_request& a, c2g_ping_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c2g_ping_request* New() const final {
    return CreateMaybeMessage<c2g_ping_request>(nullptr);
  }

  c2g_ping_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<c2g_ping_request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const c2g_ping_request& from);
  void MergeFrom(const c2g_ping_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(c2g_ping_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.c2g_ping_request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class c2g_message :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.c2g_message) */ {
 public:
  c2g_message();
  virtual ~c2g_message();

  c2g_message(const c2g_message& from);

  inline c2g_message& operator=(const c2g_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c2g_message(c2g_message&& from) noexcept
    : c2g_message() {
    *this = ::std::move(from);
  }

  inline c2g_message& operator=(c2g_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const c2g_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c2g_message* internal_default_instance() {
    return reinterpret_cast<const c2g_message*>(
               &_c2g_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(c2g_message* other);
  friend void swap(c2g_message& a, c2g_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c2g_message* New() const final {
    return CreateMaybeMessage<c2g_message>(nullptr);
  }

  c2g_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<c2g_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const c2g_message& from);
  void MergeFrom(const c2g_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(c2g_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.starlit.network.message.client.c2g_data_message data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::com::starlit::network::message::client::c2g_data_message& data() const;
  ::com::starlit::network::message::client::c2g_data_message* release_data();
  ::com::starlit::network::message::client::c2g_data_message* mutable_data();
  void set_allocated_data(::com::starlit::network::message::client::c2g_data_message* data);

  // .com.starlit.network.message.client.c2g_ping_request ping_request = 2;
  bool has_ping_request() const;
  void clear_ping_request();
  static const int kPingRequestFieldNumber = 2;
  const ::com::starlit::network::message::client::c2g_ping_request& ping_request() const;
  ::com::starlit::network::message::client::c2g_ping_request* release_ping_request();
  ::com::starlit::network::message::client::c2g_ping_request* mutable_ping_request();
  void set_allocated_ping_request(::com::starlit::network::message::client::c2g_ping_request* ping_request);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.c2g_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::com::starlit::network::message::client::c2g_data_message* data_;
  ::com::starlit::network::message::client::c2g_ping_request* ping_request_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class g2c_data_message :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.g2c_data_message) */ {
 public:
  g2c_data_message();
  virtual ~g2c_data_message();

  g2c_data_message(const g2c_data_message& from);

  inline g2c_data_message& operator=(const g2c_data_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  g2c_data_message(g2c_data_message&& from) noexcept
    : g2c_data_message() {
    *this = ::std::move(from);
  }

  inline g2c_data_message& operator=(g2c_data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const g2c_data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const g2c_data_message* internal_default_instance() {
    return reinterpret_cast<const g2c_data_message*>(
               &_g2c_data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(g2c_data_message* other);
  friend void swap(g2c_data_message& a, g2c_data_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline g2c_data_message* New() const final {
    return CreateMaybeMessage<g2c_data_message>(nullptr);
  }

  g2c_data_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<g2c_data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const g2c_data_message& from);
  void MergeFrom(const g2c_data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(g2c_data_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.g2c_data_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class g2c_ping_response :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.g2c_ping_response) */ {
 public:
  g2c_ping_response();
  virtual ~g2c_ping_response();

  g2c_ping_response(const g2c_ping_response& from);

  inline g2c_ping_response& operator=(const g2c_ping_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  g2c_ping_response(g2c_ping_response&& from) noexcept
    : g2c_ping_response() {
    *this = ::std::move(from);
  }

  inline g2c_ping_response& operator=(g2c_ping_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const g2c_ping_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const g2c_ping_response* internal_default_instance() {
    return reinterpret_cast<const g2c_ping_response*>(
               &_g2c_ping_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(g2c_ping_response* other);
  friend void swap(g2c_ping_response& a, g2c_ping_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline g2c_ping_response* New() const final {
    return CreateMaybeMessage<g2c_ping_response>(nullptr);
  }

  g2c_ping_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<g2c_ping_response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const g2c_ping_response& from);
  void MergeFrom(const g2c_ping_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(g2c_ping_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.g2c_ping_response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class g2c_server_connected :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.g2c_server_connected) */ {
 public:
  g2c_server_connected();
  virtual ~g2c_server_connected();

  g2c_server_connected(const g2c_server_connected& from);

  inline g2c_server_connected& operator=(const g2c_server_connected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  g2c_server_connected(g2c_server_connected&& from) noexcept
    : g2c_server_connected() {
    *this = ::std::move(from);
  }

  inline g2c_server_connected& operator=(g2c_server_connected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const g2c_server_connected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const g2c_server_connected* internal_default_instance() {
    return reinterpret_cast<const g2c_server_connected*>(
               &_g2c_server_connected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(g2c_server_connected* other);
  friend void swap(g2c_server_connected& a, g2c_server_connected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline g2c_server_connected* New() const final {
    return CreateMaybeMessage<g2c_server_connected>(nullptr);
  }

  g2c_server_connected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<g2c_server_connected>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const g2c_server_connected& from);
  void MergeFrom(const g2c_server_connected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(g2c_server_connected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string servername = 1;
  void clear_servername();
  static const int kServernameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.g2c_server_connected)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class g2c_server_disconnected :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.g2c_server_disconnected) */ {
 public:
  g2c_server_disconnected();
  virtual ~g2c_server_disconnected();

  g2c_server_disconnected(const g2c_server_disconnected& from);

  inline g2c_server_disconnected& operator=(const g2c_server_disconnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  g2c_server_disconnected(g2c_server_disconnected&& from) noexcept
    : g2c_server_disconnected() {
    *this = ::std::move(from);
  }

  inline g2c_server_disconnected& operator=(g2c_server_disconnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const g2c_server_disconnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const g2c_server_disconnected* internal_default_instance() {
    return reinterpret_cast<const g2c_server_disconnected*>(
               &_g2c_server_disconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(g2c_server_disconnected* other);
  friend void swap(g2c_server_disconnected& a, g2c_server_disconnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline g2c_server_disconnected* New() const final {
    return CreateMaybeMessage<g2c_server_disconnected>(nullptr);
  }

  g2c_server_disconnected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<g2c_server_disconnected>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const g2c_server_disconnected& from);
  void MergeFrom(const g2c_server_disconnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(g2c_server_disconnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string servername = 1;
  void clear_servername();
  static const int kServernameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.g2c_server_disconnected)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class g2c_close :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.g2c_close) */ {
 public:
  g2c_close();
  virtual ~g2c_close();

  g2c_close(const g2c_close& from);

  inline g2c_close& operator=(const g2c_close& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  g2c_close(g2c_close&& from) noexcept
    : g2c_close() {
    *this = ::std::move(from);
  }

  inline g2c_close& operator=(g2c_close&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const g2c_close& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const g2c_close* internal_default_instance() {
    return reinterpret_cast<const g2c_close*>(
               &_g2c_close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(g2c_close* other);
  friend void swap(g2c_close& a, g2c_close& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline g2c_close* New() const final {
    return CreateMaybeMessage<g2c_close>(nullptr);
  }

  g2c_close* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<g2c_close>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const g2c_close& from);
  void MergeFrom(const g2c_close& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(g2c_close* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 errorcode = 1;
  void clear_errorcode();
  static const int kErrorcodeFieldNumber = 1;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.g2c_close)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 errorcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class g2c_message :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.client.g2c_message) */ {
 public:
  g2c_message();
  virtual ~g2c_message();

  g2c_message(const g2c_message& from);

  inline g2c_message& operator=(const g2c_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  g2c_message(g2c_message&& from) noexcept
    : g2c_message() {
    *this = ::std::move(from);
  }

  inline g2c_message& operator=(g2c_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const g2c_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const g2c_message* internal_default_instance() {
    return reinterpret_cast<const g2c_message*>(
               &_g2c_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(g2c_message* other);
  friend void swap(g2c_message& a, g2c_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline g2c_message* New() const final {
    return CreateMaybeMessage<g2c_message>(nullptr);
  }

  g2c_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<g2c_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const g2c_message& from);
  void MergeFrom(const g2c_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(g2c_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.starlit.network.message.client.g2c_data_message data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::com::starlit::network::message::client::g2c_data_message& data() const;
  ::com::starlit::network::message::client::g2c_data_message* release_data();
  ::com::starlit::network::message::client::g2c_data_message* mutable_data();
  void set_allocated_data(::com::starlit::network::message::client::g2c_data_message* data);

  // .com.starlit.network.message.client.g2c_ping_response ping_response = 2;
  bool has_ping_response() const;
  void clear_ping_response();
  static const int kPingResponseFieldNumber = 2;
  const ::com::starlit::network::message::client::g2c_ping_response& ping_response() const;
  ::com::starlit::network::message::client::g2c_ping_response* release_ping_response();
  ::com::starlit::network::message::client::g2c_ping_response* mutable_ping_response();
  void set_allocated_ping_response(::com::starlit::network::message::client::g2c_ping_response* ping_response);

  // .com.starlit.network.message.client.g2c_server_connected server_connected = 3;
  bool has_server_connected() const;
  void clear_server_connected();
  static const int kServerConnectedFieldNumber = 3;
  const ::com::starlit::network::message::client::g2c_server_connected& server_connected() const;
  ::com::starlit::network::message::client::g2c_server_connected* release_server_connected();
  ::com::starlit::network::message::client::g2c_server_connected* mutable_server_connected();
  void set_allocated_server_connected(::com::starlit::network::message::client::g2c_server_connected* server_connected);

  // .com.starlit.network.message.client.g2c_server_disconnected server_disconnected = 4;
  bool has_server_disconnected() const;
  void clear_server_disconnected();
  static const int kServerDisconnectedFieldNumber = 4;
  const ::com::starlit::network::message::client::g2c_server_disconnected& server_disconnected() const;
  ::com::starlit::network::message::client::g2c_server_disconnected* release_server_disconnected();
  ::com::starlit::network::message::client::g2c_server_disconnected* mutable_server_disconnected();
  void set_allocated_server_disconnected(::com::starlit::network::message::client::g2c_server_disconnected* server_disconnected);

  // .com.starlit.network.message.client.g2c_close close = 5;
  bool has_close() const;
  void clear_close();
  static const int kCloseFieldNumber = 5;
  const ::com::starlit::network::message::client::g2c_close& close() const;
  ::com::starlit::network::message::client::g2c_close* release_close();
  ::com::starlit::network::message::client::g2c_close* mutable_close();
  void set_allocated_close(::com::starlit::network::message::client::g2c_close* close);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.client.g2c_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::com::starlit::network::message::client::g2c_data_message* data_;
  ::com::starlit::network::message::client::g2c_ping_response* ping_response_;
  ::com::starlit::network::message::client::g2c_server_connected* server_connected_;
  ::com::starlit::network::message::client::g2c_server_disconnected* server_disconnected_;
  ::com::starlit::network::message::client::g2c_close* close_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ClientSessionMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// c2g_data_message

// bytes data = 1;
inline void c2g_data_message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& c2g_data_message::data() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.c2g_data_message.data)
  return data_.GetNoArena();
}
inline void c2g_data_message::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.client.c2g_data_message.data)
}
#if LANG_CXX11
inline void c2g_data_message::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.client.c2g_data_message.data)
}
#endif
inline void c2g_data_message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.client.c2g_data_message.data)
}
inline void c2g_data_message::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.client.c2g_data_message.data)
}
inline ::std::string* c2g_data_message::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.c2g_data_message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* c2g_data_message::release_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.c2g_data_message.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void c2g_data_message::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.c2g_data_message.data)
}

// -------------------------------------------------------------------

// c2g_ping_request

// int64 timestamp = 1;
inline void c2g_ping_request::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 c2g_ping_request::timestamp() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.c2g_ping_request.timestamp)
  return timestamp_;
}
inline void c2g_ping_request::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.client.c2g_ping_request.timestamp)
}

// -------------------------------------------------------------------

// c2g_message

// .com.starlit.network.message.client.c2g_data_message data = 1;
inline bool c2g_message::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline void c2g_message::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::com::starlit::network::message::client::c2g_data_message& c2g_message::data() const {
  const ::com::starlit::network::message::client::c2g_data_message* p = data_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.c2g_message.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::client::c2g_data_message*>(
      &::com::starlit::network::message::client::_c2g_data_message_default_instance_);
}
inline ::com::starlit::network::message::client::c2g_data_message* c2g_message::release_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.c2g_message.data)
  
  ::com::starlit::network::message::client::c2g_data_message* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::client::c2g_data_message* c2g_message::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::client::c2g_data_message>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.c2g_message.data)
  return data_;
}
inline void c2g_message::set_allocated_data(::com::starlit::network::message::client::c2g_data_message* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.c2g_message.data)
}

// .com.starlit.network.message.client.c2g_ping_request ping_request = 2;
inline bool c2g_message::has_ping_request() const {
  return this != internal_default_instance() && ping_request_ != nullptr;
}
inline void c2g_message::clear_ping_request() {
  if (GetArenaNoVirtual() == nullptr && ping_request_ != nullptr) {
    delete ping_request_;
  }
  ping_request_ = nullptr;
}
inline const ::com::starlit::network::message::client::c2g_ping_request& c2g_message::ping_request() const {
  const ::com::starlit::network::message::client::c2g_ping_request* p = ping_request_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.c2g_message.ping_request)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::client::c2g_ping_request*>(
      &::com::starlit::network::message::client::_c2g_ping_request_default_instance_);
}
inline ::com::starlit::network::message::client::c2g_ping_request* c2g_message::release_ping_request() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.c2g_message.ping_request)
  
  ::com::starlit::network::message::client::c2g_ping_request* temp = ping_request_;
  ping_request_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::client::c2g_ping_request* c2g_message::mutable_ping_request() {
  
  if (ping_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::client::c2g_ping_request>(GetArenaNoVirtual());
    ping_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.c2g_message.ping_request)
  return ping_request_;
}
inline void c2g_message::set_allocated_ping_request(::com::starlit::network::message::client::c2g_ping_request* ping_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ping_request_;
  }
  if (ping_request) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ping_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ping_request, submessage_arena);
    }
    
  } else {
    
  }
  ping_request_ = ping_request;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.c2g_message.ping_request)
}

// -------------------------------------------------------------------

// g2c_data_message

// bytes data = 1;
inline void g2c_data_message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& g2c_data_message::data() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_data_message.data)
  return data_.GetNoArena();
}
inline void g2c_data_message::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.client.g2c_data_message.data)
}
#if LANG_CXX11
inline void g2c_data_message::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.client.g2c_data_message.data)
}
#endif
inline void g2c_data_message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.client.g2c_data_message.data)
}
inline void g2c_data_message::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.client.g2c_data_message.data)
}
inline ::std::string* g2c_data_message::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_data_message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* g2c_data_message::release_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_data_message.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void g2c_data_message::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_data_message.data)
}

// -------------------------------------------------------------------

// g2c_ping_response

// int64 timestamp = 1;
inline void g2c_ping_response::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 g2c_ping_response::timestamp() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_ping_response.timestamp)
  return timestamp_;
}
inline void g2c_ping_response::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.client.g2c_ping_response.timestamp)
}

// -------------------------------------------------------------------

// g2c_server_connected

// string servername = 1;
inline void g2c_server_connected::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& g2c_server_connected::servername() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_server_connected.servername)
  return servername_.GetNoArena();
}
inline void g2c_server_connected::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.client.g2c_server_connected.servername)
}
#if LANG_CXX11
inline void g2c_server_connected::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.client.g2c_server_connected.servername)
}
#endif
inline void g2c_server_connected::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.client.g2c_server_connected.servername)
}
inline void g2c_server_connected::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.client.g2c_server_connected.servername)
}
inline ::std::string* g2c_server_connected::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_server_connected.servername)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* g2c_server_connected::release_servername() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_server_connected.servername)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void g2c_server_connected::set_allocated_servername(::std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_server_connected.servername)
}

// -------------------------------------------------------------------

// g2c_server_disconnected

// string servername = 1;
inline void g2c_server_disconnected::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& g2c_server_disconnected::servername() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_server_disconnected.servername)
  return servername_.GetNoArena();
}
inline void g2c_server_disconnected::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.client.g2c_server_disconnected.servername)
}
#if LANG_CXX11
inline void g2c_server_disconnected::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.client.g2c_server_disconnected.servername)
}
#endif
inline void g2c_server_disconnected::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.client.g2c_server_disconnected.servername)
}
inline void g2c_server_disconnected::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.client.g2c_server_disconnected.servername)
}
inline ::std::string* g2c_server_disconnected::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_server_disconnected.servername)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* g2c_server_disconnected::release_servername() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_server_disconnected.servername)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void g2c_server_disconnected::set_allocated_servername(::std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_server_disconnected.servername)
}

// -------------------------------------------------------------------

// g2c_close

// int32 errorcode = 1;
inline void g2c_close::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 g2c_close::errorcode() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_close.errorcode)
  return errorcode_;
}
inline void g2c_close::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.client.g2c_close.errorcode)
}

// string reason = 2;
inline void g2c_close::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& g2c_close::reason() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_close.reason)
  return reason_.GetNoArena();
}
inline void g2c_close::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.client.g2c_close.reason)
}
#if LANG_CXX11
inline void g2c_close::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.client.g2c_close.reason)
}
#endif
inline void g2c_close::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.client.g2c_close.reason)
}
inline void g2c_close::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.client.g2c_close.reason)
}
inline ::std::string* g2c_close::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_close.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* g2c_close::release_reason() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_close.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void g2c_close::set_allocated_reason(::std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_close.reason)
}

// -------------------------------------------------------------------

// g2c_message

// .com.starlit.network.message.client.g2c_data_message data = 1;
inline bool g2c_message::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline void g2c_message::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::com::starlit::network::message::client::g2c_data_message& g2c_message::data() const {
  const ::com::starlit::network::message::client::g2c_data_message* p = data_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_message.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::client::g2c_data_message*>(
      &::com::starlit::network::message::client::_g2c_data_message_default_instance_);
}
inline ::com::starlit::network::message::client::g2c_data_message* g2c_message::release_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_message.data)
  
  ::com::starlit::network::message::client::g2c_data_message* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::client::g2c_data_message* g2c_message::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::client::g2c_data_message>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_message.data)
  return data_;
}
inline void g2c_message::set_allocated_data(::com::starlit::network::message::client::g2c_data_message* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_message.data)
}

// .com.starlit.network.message.client.g2c_ping_response ping_response = 2;
inline bool g2c_message::has_ping_response() const {
  return this != internal_default_instance() && ping_response_ != nullptr;
}
inline void g2c_message::clear_ping_response() {
  if (GetArenaNoVirtual() == nullptr && ping_response_ != nullptr) {
    delete ping_response_;
  }
  ping_response_ = nullptr;
}
inline const ::com::starlit::network::message::client::g2c_ping_response& g2c_message::ping_response() const {
  const ::com::starlit::network::message::client::g2c_ping_response* p = ping_response_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_message.ping_response)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::client::g2c_ping_response*>(
      &::com::starlit::network::message::client::_g2c_ping_response_default_instance_);
}
inline ::com::starlit::network::message::client::g2c_ping_response* g2c_message::release_ping_response() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_message.ping_response)
  
  ::com::starlit::network::message::client::g2c_ping_response* temp = ping_response_;
  ping_response_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::client::g2c_ping_response* g2c_message::mutable_ping_response() {
  
  if (ping_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::client::g2c_ping_response>(GetArenaNoVirtual());
    ping_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_message.ping_response)
  return ping_response_;
}
inline void g2c_message::set_allocated_ping_response(::com::starlit::network::message::client::g2c_ping_response* ping_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ping_response_;
  }
  if (ping_response) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ping_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ping_response, submessage_arena);
    }
    
  } else {
    
  }
  ping_response_ = ping_response;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_message.ping_response)
}

// .com.starlit.network.message.client.g2c_server_connected server_connected = 3;
inline bool g2c_message::has_server_connected() const {
  return this != internal_default_instance() && server_connected_ != nullptr;
}
inline void g2c_message::clear_server_connected() {
  if (GetArenaNoVirtual() == nullptr && server_connected_ != nullptr) {
    delete server_connected_;
  }
  server_connected_ = nullptr;
}
inline const ::com::starlit::network::message::client::g2c_server_connected& g2c_message::server_connected() const {
  const ::com::starlit::network::message::client::g2c_server_connected* p = server_connected_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_message.server_connected)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::client::g2c_server_connected*>(
      &::com::starlit::network::message::client::_g2c_server_connected_default_instance_);
}
inline ::com::starlit::network::message::client::g2c_server_connected* g2c_message::release_server_connected() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_message.server_connected)
  
  ::com::starlit::network::message::client::g2c_server_connected* temp = server_connected_;
  server_connected_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::client::g2c_server_connected* g2c_message::mutable_server_connected() {
  
  if (server_connected_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::client::g2c_server_connected>(GetArenaNoVirtual());
    server_connected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_message.server_connected)
  return server_connected_;
}
inline void g2c_message::set_allocated_server_connected(::com::starlit::network::message::client::g2c_server_connected* server_connected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_connected_;
  }
  if (server_connected) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_connected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_connected, submessage_arena);
    }
    
  } else {
    
  }
  server_connected_ = server_connected;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_message.server_connected)
}

// .com.starlit.network.message.client.g2c_server_disconnected server_disconnected = 4;
inline bool g2c_message::has_server_disconnected() const {
  return this != internal_default_instance() && server_disconnected_ != nullptr;
}
inline void g2c_message::clear_server_disconnected() {
  if (GetArenaNoVirtual() == nullptr && server_disconnected_ != nullptr) {
    delete server_disconnected_;
  }
  server_disconnected_ = nullptr;
}
inline const ::com::starlit::network::message::client::g2c_server_disconnected& g2c_message::server_disconnected() const {
  const ::com::starlit::network::message::client::g2c_server_disconnected* p = server_disconnected_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_message.server_disconnected)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::client::g2c_server_disconnected*>(
      &::com::starlit::network::message::client::_g2c_server_disconnected_default_instance_);
}
inline ::com::starlit::network::message::client::g2c_server_disconnected* g2c_message::release_server_disconnected() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_message.server_disconnected)
  
  ::com::starlit::network::message::client::g2c_server_disconnected* temp = server_disconnected_;
  server_disconnected_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::client::g2c_server_disconnected* g2c_message::mutable_server_disconnected() {
  
  if (server_disconnected_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::client::g2c_server_disconnected>(GetArenaNoVirtual());
    server_disconnected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_message.server_disconnected)
  return server_disconnected_;
}
inline void g2c_message::set_allocated_server_disconnected(::com::starlit::network::message::client::g2c_server_disconnected* server_disconnected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete server_disconnected_;
  }
  if (server_disconnected) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_disconnected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server_disconnected, submessage_arena);
    }
    
  } else {
    
  }
  server_disconnected_ = server_disconnected;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_message.server_disconnected)
}

// .com.starlit.network.message.client.g2c_close close = 5;
inline bool g2c_message::has_close() const {
  return this != internal_default_instance() && close_ != nullptr;
}
inline void g2c_message::clear_close() {
  if (GetArenaNoVirtual() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
}
inline const ::com::starlit::network::message::client::g2c_close& g2c_message::close() const {
  const ::com::starlit::network::message::client::g2c_close* p = close_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.client.g2c_message.close)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::client::g2c_close*>(
      &::com::starlit::network::message::client::_g2c_close_default_instance_);
}
inline ::com::starlit::network::message::client::g2c_close* g2c_message::release_close() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.client.g2c_message.close)
  
  ::com::starlit::network::message::client::g2c_close* temp = close_;
  close_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::client::g2c_close* g2c_message::mutable_close() {
  
  if (close_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::client::g2c_close>(GetArenaNoVirtual());
    close_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.client.g2c_message.close)
  return close_;
}
inline void g2c_message::set_allocated_close(::com::starlit::network::message::client::g2c_close* close) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete close_;
  }
  if (close) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      close = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, close, submessage_arena);
    }
    
  } else {
    
  }
  close_ = close;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.client.g2c_message.close)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace client
}  // namespace message
}  // namespace network
}  // namespace starlit
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ClientSessionMessage_2eproto
