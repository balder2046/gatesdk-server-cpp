// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerSessionMessage.proto

#ifndef PROTOBUF_INCLUDED_ServerSessionMessage_2eproto
#define PROTOBUF_INCLUDED_ServerSessionMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServerSessionMessage_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ServerSessionMessage_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace com {
namespace starlit {
namespace network {
namespace message {
namespace csserver {
class c2s_client_connected;
class c2s_client_connectedDefaultTypeInternal;
extern c2s_client_connectedDefaultTypeInternal _c2s_client_connected_default_instance_;
class c2s_client_data;
class c2s_client_dataDefaultTypeInternal;
extern c2s_client_dataDefaultTypeInternal _c2s_client_data_default_instance_;
class c2s_client_disconnected;
class c2s_client_disconnectedDefaultTypeInternal;
extern c2s_client_disconnectedDefaultTypeInternal _c2s_client_disconnected_default_instance_;
class c2s_message;
class c2s_messageDefaultTypeInternal;
extern c2s_messageDefaultTypeInternal _c2s_message_default_instance_;
class g2s_register_response;
class g2s_register_responseDefaultTypeInternal;
extern g2s_register_responseDefaultTypeInternal _g2s_register_response_default_instance_;
class s2c_data_message;
class s2c_data_messageDefaultTypeInternal;
extern s2c_data_messageDefaultTypeInternal _s2c_data_message_default_instance_;
class s2c_kick;
class s2c_kickDefaultTypeInternal;
extern s2c_kickDefaultTypeInternal _s2c_kick_default_instance_;
class s2c_message;
class s2c_messageDefaultTypeInternal;
extern s2c_messageDefaultTypeInternal _s2c_message_default_instance_;
class s2c_multi_data_message;
class s2c_multi_data_messageDefaultTypeInternal;
extern s2c_multi_data_messageDefaultTypeInternal _s2c_multi_data_message_default_instance_;
class s2c_multi_kick;
class s2c_multi_kickDefaultTypeInternal;
extern s2c_multi_kickDefaultTypeInternal _s2c_multi_kick_default_instance_;
class s2c_setclientlevel;
class s2c_setclientlevelDefaultTypeInternal;
extern s2c_setclientlevelDefaultTypeInternal _s2c_setclientlevel_default_instance_;
class s2g_register_server;
class s2g_register_serverDefaultTypeInternal;
extern s2g_register_serverDefaultTypeInternal _s2g_register_server_default_instance_;
}  // namespace csserver
}  // namespace message
}  // namespace network
}  // namespace starlit
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::starlit::network::message::csserver::c2s_client_connected* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::c2s_client_connected>(Arena*);
template<> ::com::starlit::network::message::csserver::c2s_client_data* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::c2s_client_data>(Arena*);
template<> ::com::starlit::network::message::csserver::c2s_client_disconnected* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::c2s_client_disconnected>(Arena*);
template<> ::com::starlit::network::message::csserver::c2s_message* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::c2s_message>(Arena*);
template<> ::com::starlit::network::message::csserver::g2s_register_response* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::g2s_register_response>(Arena*);
template<> ::com::starlit::network::message::csserver::s2c_data_message* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_data_message>(Arena*);
template<> ::com::starlit::network::message::csserver::s2c_kick* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_kick>(Arena*);
template<> ::com::starlit::network::message::csserver::s2c_message* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_message>(Arena*);
template<> ::com::starlit::network::message::csserver::s2c_multi_data_message* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_multi_data_message>(Arena*);
template<> ::com::starlit::network::message::csserver::s2c_multi_kick* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_multi_kick>(Arena*);
template<> ::com::starlit::network::message::csserver::s2c_setclientlevel* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_setclientlevel>(Arena*);
template<> ::com::starlit::network::message::csserver::s2g_register_server* Arena::CreateMaybeMessage<::com::starlit::network::message::csserver::s2g_register_server>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace starlit {
namespace network {
namespace message {
namespace csserver {

// ===================================================================

class s2g_register_server :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.s2g_register_server) */ {
 public:
  s2g_register_server();
  virtual ~s2g_register_server();

  s2g_register_server(const s2g_register_server& from);

  inline s2g_register_server& operator=(const s2g_register_server& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  s2g_register_server(s2g_register_server&& from) noexcept
    : s2g_register_server() {
    *this = ::std::move(from);
  }

  inline s2g_register_server& operator=(s2g_register_server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const s2g_register_server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const s2g_register_server* internal_default_instance() {
    return reinterpret_cast<const s2g_register_server*>(
               &_s2g_register_server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(s2g_register_server* other);
  friend void swap(s2g_register_server& a, s2g_register_server& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline s2g_register_server* New() const final {
    return CreateMaybeMessage<s2g_register_server>(nullptr);
  }

  s2g_register_server* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<s2g_register_server>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const s2g_register_server& from);
  void MergeFrom(const s2g_register_server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(s2g_register_server* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string servername = 1;
  void clear_servername();
  static const int kServernameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // bool isdefault = 2;
  void clear_isdefault();
  static const int kIsdefaultFieldNumber = 2;
  bool isdefault() const;
  void set_isdefault(bool value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.s2g_register_server)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  bool isdefault_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class s2c_data_message :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.s2c_data_message) */ {
 public:
  s2c_data_message();
  virtual ~s2c_data_message();

  s2c_data_message(const s2c_data_message& from);

  inline s2c_data_message& operator=(const s2c_data_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  s2c_data_message(s2c_data_message&& from) noexcept
    : s2c_data_message() {
    *this = ::std::move(from);
  }

  inline s2c_data_message& operator=(s2c_data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const s2c_data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const s2c_data_message* internal_default_instance() {
    return reinterpret_cast<const s2c_data_message*>(
               &_s2c_data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(s2c_data_message* other);
  friend void swap(s2c_data_message& a, s2c_data_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline s2c_data_message* New() const final {
    return CreateMaybeMessage<s2c_data_message>(nullptr);
  }

  s2c_data_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<s2c_data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const s2c_data_message& from);
  void MergeFrom(const s2c_data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(s2c_data_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 networkid = 1;
  void clear_networkid();
  static const int kNetworkidFieldNumber = 1;
  ::google::protobuf::int64 networkid() const;
  void set_networkid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.s2c_data_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 networkid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class s2c_multi_data_message :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.s2c_multi_data_message) */ {
 public:
  s2c_multi_data_message();
  virtual ~s2c_multi_data_message();

  s2c_multi_data_message(const s2c_multi_data_message& from);

  inline s2c_multi_data_message& operator=(const s2c_multi_data_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  s2c_multi_data_message(s2c_multi_data_message&& from) noexcept
    : s2c_multi_data_message() {
    *this = ::std::move(from);
  }

  inline s2c_multi_data_message& operator=(s2c_multi_data_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const s2c_multi_data_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const s2c_multi_data_message* internal_default_instance() {
    return reinterpret_cast<const s2c_multi_data_message*>(
               &_s2c_multi_data_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(s2c_multi_data_message* other);
  friend void swap(s2c_multi_data_message& a, s2c_multi_data_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline s2c_multi_data_message* New() const final {
    return CreateMaybeMessage<s2c_multi_data_message>(nullptr);
  }

  s2c_multi_data_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<s2c_multi_data_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const s2c_multi_data_message& from);
  void MergeFrom(const s2c_multi_data_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(s2c_multi_data_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 networkids = 1;
  int networkids_size() const;
  void clear_networkids();
  static const int kNetworkidsFieldNumber = 1;
  ::google::protobuf::int64 networkids(int index) const;
  void set_networkids(int index, ::google::protobuf::int64 value);
  void add_networkids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      networkids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_networkids();

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.s2c_multi_data_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > networkids_;
  mutable std::atomic<int> _networkids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class s2c_kick :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.s2c_kick) */ {
 public:
  s2c_kick();
  virtual ~s2c_kick();

  s2c_kick(const s2c_kick& from);

  inline s2c_kick& operator=(const s2c_kick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  s2c_kick(s2c_kick&& from) noexcept
    : s2c_kick() {
    *this = ::std::move(from);
  }

  inline s2c_kick& operator=(s2c_kick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const s2c_kick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const s2c_kick* internal_default_instance() {
    return reinterpret_cast<const s2c_kick*>(
               &_s2c_kick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(s2c_kick* other);
  friend void swap(s2c_kick& a, s2c_kick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline s2c_kick* New() const final {
    return CreateMaybeMessage<s2c_kick>(nullptr);
  }

  s2c_kick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<s2c_kick>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const s2c_kick& from);
  void MergeFrom(const s2c_kick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(s2c_kick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 networkid = 1;
  void clear_networkid();
  static const int kNetworkidFieldNumber = 1;
  ::google::protobuf::int64 networkid() const;
  void set_networkid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.s2c_kick)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 networkid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class s2c_multi_kick :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.s2c_multi_kick) */ {
 public:
  s2c_multi_kick();
  virtual ~s2c_multi_kick();

  s2c_multi_kick(const s2c_multi_kick& from);

  inline s2c_multi_kick& operator=(const s2c_multi_kick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  s2c_multi_kick(s2c_multi_kick&& from) noexcept
    : s2c_multi_kick() {
    *this = ::std::move(from);
  }

  inline s2c_multi_kick& operator=(s2c_multi_kick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const s2c_multi_kick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const s2c_multi_kick* internal_default_instance() {
    return reinterpret_cast<const s2c_multi_kick*>(
               &_s2c_multi_kick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(s2c_multi_kick* other);
  friend void swap(s2c_multi_kick& a, s2c_multi_kick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline s2c_multi_kick* New() const final {
    return CreateMaybeMessage<s2c_multi_kick>(nullptr);
  }

  s2c_multi_kick* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<s2c_multi_kick>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const s2c_multi_kick& from);
  void MergeFrom(const s2c_multi_kick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(s2c_multi_kick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 networkids = 1;
  int networkids_size() const;
  void clear_networkids();
  static const int kNetworkidsFieldNumber = 1;
  ::google::protobuf::int64 networkids(int index) const;
  void set_networkids(int index, ::google::protobuf::int64 value);
  void add_networkids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      networkids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_networkids();

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.s2c_multi_kick)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > networkids_;
  mutable std::atomic<int> _networkids_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class s2c_setclientlevel :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.s2c_setclientlevel) */ {
 public:
  s2c_setclientlevel();
  virtual ~s2c_setclientlevel();

  s2c_setclientlevel(const s2c_setclientlevel& from);

  inline s2c_setclientlevel& operator=(const s2c_setclientlevel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  s2c_setclientlevel(s2c_setclientlevel&& from) noexcept
    : s2c_setclientlevel() {
    *this = ::std::move(from);
  }

  inline s2c_setclientlevel& operator=(s2c_setclientlevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const s2c_setclientlevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const s2c_setclientlevel* internal_default_instance() {
    return reinterpret_cast<const s2c_setclientlevel*>(
               &_s2c_setclientlevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(s2c_setclientlevel* other);
  friend void swap(s2c_setclientlevel& a, s2c_setclientlevel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline s2c_setclientlevel* New() const final {
    return CreateMaybeMessage<s2c_setclientlevel>(nullptr);
  }

  s2c_setclientlevel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<s2c_setclientlevel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const s2c_setclientlevel& from);
  void MergeFrom(const s2c_setclientlevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(s2c_setclientlevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 networkid = 1;
  void clear_networkid();
  static const int kNetworkidFieldNumber = 1;
  ::google::protobuf::int64 networkid() const;
  void set_networkid(::google::protobuf::int64 value);

  // int32 right = 2;
  void clear_right();
  static const int kRightFieldNumber = 2;
  ::google::protobuf::int32 right() const;
  void set_right(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.s2c_setclientlevel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 networkid_;
  ::google::protobuf::int32 right_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class s2c_message :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.s2c_message) */ {
 public:
  s2c_message();
  virtual ~s2c_message();

  s2c_message(const s2c_message& from);

  inline s2c_message& operator=(const s2c_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  s2c_message(s2c_message&& from) noexcept
    : s2c_message() {
    *this = ::std::move(from);
  }

  inline s2c_message& operator=(s2c_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const s2c_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const s2c_message* internal_default_instance() {
    return reinterpret_cast<const s2c_message*>(
               &_s2c_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(s2c_message* other);
  friend void swap(s2c_message& a, s2c_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline s2c_message* New() const final {
    return CreateMaybeMessage<s2c_message>(nullptr);
  }

  s2c_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<s2c_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const s2c_message& from);
  void MergeFrom(const s2c_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(s2c_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.starlit.network.message.csserver.s2c_data_message data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::com::starlit::network::message::csserver::s2c_data_message& data() const;
  ::com::starlit::network::message::csserver::s2c_data_message* release_data();
  ::com::starlit::network::message::csserver::s2c_data_message* mutable_data();
  void set_allocated_data(::com::starlit::network::message::csserver::s2c_data_message* data);

  // .com.starlit.network.message.csserver.s2c_multi_data_message multi_data = 2;
  bool has_multi_data() const;
  void clear_multi_data();
  static const int kMultiDataFieldNumber = 2;
  const ::com::starlit::network::message::csserver::s2c_multi_data_message& multi_data() const;
  ::com::starlit::network::message::csserver::s2c_multi_data_message* release_multi_data();
  ::com::starlit::network::message::csserver::s2c_multi_data_message* mutable_multi_data();
  void set_allocated_multi_data(::com::starlit::network::message::csserver::s2c_multi_data_message* multi_data);

  // .com.starlit.network.message.csserver.s2c_kick kick = 3;
  bool has_kick() const;
  void clear_kick();
  static const int kKickFieldNumber = 3;
  const ::com::starlit::network::message::csserver::s2c_kick& kick() const;
  ::com::starlit::network::message::csserver::s2c_kick* release_kick();
  ::com::starlit::network::message::csserver::s2c_kick* mutable_kick();
  void set_allocated_kick(::com::starlit::network::message::csserver::s2c_kick* kick);

  // .com.starlit.network.message.csserver.s2c_multi_kick multi_kick = 4;
  bool has_multi_kick() const;
  void clear_multi_kick();
  static const int kMultiKickFieldNumber = 4;
  const ::com::starlit::network::message::csserver::s2c_multi_kick& multi_kick() const;
  ::com::starlit::network::message::csserver::s2c_multi_kick* release_multi_kick();
  ::com::starlit::network::message::csserver::s2c_multi_kick* mutable_multi_kick();
  void set_allocated_multi_kick(::com::starlit::network::message::csserver::s2c_multi_kick* multi_kick);

  // .com.starlit.network.message.csserver.s2c_setclientlevel setclientlevel = 5;
  bool has_setclientlevel() const;
  void clear_setclientlevel();
  static const int kSetclientlevelFieldNumber = 5;
  const ::com::starlit::network::message::csserver::s2c_setclientlevel& setclientlevel() const;
  ::com::starlit::network::message::csserver::s2c_setclientlevel* release_setclientlevel();
  ::com::starlit::network::message::csserver::s2c_setclientlevel* mutable_setclientlevel();
  void set_allocated_setclientlevel(::com::starlit::network::message::csserver::s2c_setclientlevel* setclientlevel);

  // .com.starlit.network.message.csserver.s2g_register_server register_server = 6;
  bool has_register_server() const;
  void clear_register_server();
  static const int kRegisterServerFieldNumber = 6;
  const ::com::starlit::network::message::csserver::s2g_register_server& register_server() const;
  ::com::starlit::network::message::csserver::s2g_register_server* release_register_server();
  ::com::starlit::network::message::csserver::s2g_register_server* mutable_register_server();
  void set_allocated_register_server(::com::starlit::network::message::csserver::s2g_register_server* register_server);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.s2c_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::com::starlit::network::message::csserver::s2c_data_message* data_;
  ::com::starlit::network::message::csserver::s2c_multi_data_message* multi_data_;
  ::com::starlit::network::message::csserver::s2c_kick* kick_;
  ::com::starlit::network::message::csserver::s2c_multi_kick* multi_kick_;
  ::com::starlit::network::message::csserver::s2c_setclientlevel* setclientlevel_;
  ::com::starlit::network::message::csserver::s2g_register_server* register_server_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class c2s_client_connected :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.c2s_client_connected) */ {
 public:
  c2s_client_connected();
  virtual ~c2s_client_connected();

  c2s_client_connected(const c2s_client_connected& from);

  inline c2s_client_connected& operator=(const c2s_client_connected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c2s_client_connected(c2s_client_connected&& from) noexcept
    : c2s_client_connected() {
    *this = ::std::move(from);
  }

  inline c2s_client_connected& operator=(c2s_client_connected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const c2s_client_connected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c2s_client_connected* internal_default_instance() {
    return reinterpret_cast<const c2s_client_connected*>(
               &_c2s_client_connected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(c2s_client_connected* other);
  friend void swap(c2s_client_connected& a, c2s_client_connected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c2s_client_connected* New() const final {
    return CreateMaybeMessage<c2s_client_connected>(nullptr);
  }

  c2s_client_connected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<c2s_client_connected>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const c2s_client_connected& from);
  void MergeFrom(const c2s_client_connected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(c2s_client_connected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 networkid = 1;
  void clear_networkid();
  static const int kNetworkidFieldNumber = 1;
  ::google::protobuf::int64 networkid() const;
  void set_networkid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.c2s_client_connected)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 networkid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class c2s_client_disconnected :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.c2s_client_disconnected) */ {
 public:
  c2s_client_disconnected();
  virtual ~c2s_client_disconnected();

  c2s_client_disconnected(const c2s_client_disconnected& from);

  inline c2s_client_disconnected& operator=(const c2s_client_disconnected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c2s_client_disconnected(c2s_client_disconnected&& from) noexcept
    : c2s_client_disconnected() {
    *this = ::std::move(from);
  }

  inline c2s_client_disconnected& operator=(c2s_client_disconnected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const c2s_client_disconnected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c2s_client_disconnected* internal_default_instance() {
    return reinterpret_cast<const c2s_client_disconnected*>(
               &_c2s_client_disconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(c2s_client_disconnected* other);
  friend void swap(c2s_client_disconnected& a, c2s_client_disconnected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c2s_client_disconnected* New() const final {
    return CreateMaybeMessage<c2s_client_disconnected>(nullptr);
  }

  c2s_client_disconnected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<c2s_client_disconnected>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const c2s_client_disconnected& from);
  void MergeFrom(const c2s_client_disconnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(c2s_client_disconnected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 networkid = 1;
  void clear_networkid();
  static const int kNetworkidFieldNumber = 1;
  ::google::protobuf::int64 networkid() const;
  void set_networkid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.c2s_client_disconnected)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int64 networkid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class c2s_client_data :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.c2s_client_data) */ {
 public:
  c2s_client_data();
  virtual ~c2s_client_data();

  c2s_client_data(const c2s_client_data& from);

  inline c2s_client_data& operator=(const c2s_client_data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c2s_client_data(c2s_client_data&& from) noexcept
    : c2s_client_data() {
    *this = ::std::move(from);
  }

  inline c2s_client_data& operator=(c2s_client_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const c2s_client_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c2s_client_data* internal_default_instance() {
    return reinterpret_cast<const c2s_client_data*>(
               &_c2s_client_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(c2s_client_data* other);
  friend void swap(c2s_client_data& a, c2s_client_data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c2s_client_data* New() const final {
    return CreateMaybeMessage<c2s_client_data>(nullptr);
  }

  c2s_client_data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<c2s_client_data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const c2s_client_data& from);
  void MergeFrom(const c2s_client_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(c2s_client_data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 networkid = 1;
  void clear_networkid();
  static const int kNetworkidFieldNumber = 1;
  ::google::protobuf::int64 networkid() const;
  void set_networkid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.c2s_client_data)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 networkid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class g2s_register_response :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.g2s_register_response) */ {
 public:
  g2s_register_response();
  virtual ~g2s_register_response();

  g2s_register_response(const g2s_register_response& from);

  inline g2s_register_response& operator=(const g2s_register_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  g2s_register_response(g2s_register_response&& from) noexcept
    : g2s_register_response() {
    *this = ::std::move(from);
  }

  inline g2s_register_response& operator=(g2s_register_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const g2s_register_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const g2s_register_response* internal_default_instance() {
    return reinterpret_cast<const g2s_register_response*>(
               &_g2s_register_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(g2s_register_response* other);
  friend void swap(g2s_register_response& a, g2s_register_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline g2s_register_response* New() const final {
    return CreateMaybeMessage<g2s_register_response>(nullptr);
  }

  g2s_register_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<g2s_register_response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const g2s_register_response& from);
  void MergeFrom(const g2s_register_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(g2s_register_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // bool registerok = 1;
  void clear_registerok();
  static const int kRegisterokFieldNumber = 1;
  bool registerok() const;
  void set_registerok(bool value);

  // int32 errorcode = 2;
  void clear_errorcode();
  static const int kErrorcodeFieldNumber = 2;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.g2s_register_response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  bool registerok_;
  ::google::protobuf::int32 errorcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// -------------------------------------------------------------------

class c2s_message :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:com.starlit.network.message.csserver.c2s_message) */ {
 public:
  c2s_message();
  virtual ~c2s_message();

  c2s_message(const c2s_message& from);

  inline c2s_message& operator=(const c2s_message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  c2s_message(c2s_message&& from) noexcept
    : c2s_message() {
    *this = ::std::move(from);
  }

  inline c2s_message& operator=(c2s_message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const c2s_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const c2s_message* internal_default_instance() {
    return reinterpret_cast<const c2s_message*>(
               &_c2s_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(c2s_message* other);
  friend void swap(c2s_message& a, c2s_message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline c2s_message* New() const final {
    return CreateMaybeMessage<c2s_message>(nullptr);
  }

  c2s_message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<c2s_message>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const c2s_message& from);
  void MergeFrom(const c2s_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(c2s_message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.starlit.network.message.csserver.c2s_client_connected client_connected = 1;
  bool has_client_connected() const;
  void clear_client_connected();
  static const int kClientConnectedFieldNumber = 1;
  const ::com::starlit::network::message::csserver::c2s_client_connected& client_connected() const;
  ::com::starlit::network::message::csserver::c2s_client_connected* release_client_connected();
  ::com::starlit::network::message::csserver::c2s_client_connected* mutable_client_connected();
  void set_allocated_client_connected(::com::starlit::network::message::csserver::c2s_client_connected* client_connected);

  // .com.starlit.network.message.csserver.c2s_client_disconnected client_diconnected = 2;
  bool has_client_diconnected() const;
  void clear_client_diconnected();
  static const int kClientDiconnectedFieldNumber = 2;
  const ::com::starlit::network::message::csserver::c2s_client_disconnected& client_diconnected() const;
  ::com::starlit::network::message::csserver::c2s_client_disconnected* release_client_diconnected();
  ::com::starlit::network::message::csserver::c2s_client_disconnected* mutable_client_diconnected();
  void set_allocated_client_diconnected(::com::starlit::network::message::csserver::c2s_client_disconnected* client_diconnected);

  // .com.starlit.network.message.csserver.c2s_client_data client_data = 3;
  bool has_client_data() const;
  void clear_client_data();
  static const int kClientDataFieldNumber = 3;
  const ::com::starlit::network::message::csserver::c2s_client_data& client_data() const;
  ::com::starlit::network::message::csserver::c2s_client_data* release_client_data();
  ::com::starlit::network::message::csserver::c2s_client_data* mutable_client_data();
  void set_allocated_client_data(::com::starlit::network::message::csserver::c2s_client_data* client_data);

  // .com.starlit.network.message.csserver.g2s_register_response register_response = 4;
  bool has_register_response() const;
  void clear_register_response();
  static const int kRegisterResponseFieldNumber = 4;
  const ::com::starlit::network::message::csserver::g2s_register_response& register_response() const;
  ::com::starlit::network::message::csserver::g2s_register_response* release_register_response();
  ::com::starlit::network::message::csserver::g2s_register_response* mutable_register_response();
  void set_allocated_register_response(::com::starlit::network::message::csserver::g2s_register_response* register_response);

  // @@protoc_insertion_point(class_scope:com.starlit.network.message.csserver.c2s_message)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::com::starlit::network::message::csserver::c2s_client_connected* client_connected_;
  ::com::starlit::network::message::csserver::c2s_client_disconnected* client_diconnected_;
  ::com::starlit::network::message::csserver::c2s_client_data* client_data_;
  ::com::starlit::network::message::csserver::g2s_register_response* register_response_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServerSessionMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// s2g_register_server

// string servername = 1;
inline void s2g_register_server::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& s2g_register_server::servername() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2g_register_server.servername)
  return servername_.GetNoArena();
}
inline void s2g_register_server::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2g_register_server.servername)
}
#if LANG_CXX11
inline void s2g_register_server::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.csserver.s2g_register_server.servername)
}
#endif
inline void s2g_register_server::set_servername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.csserver.s2g_register_server.servername)
}
inline void s2g_register_server::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.csserver.s2g_register_server.servername)
}
inline ::std::string* s2g_register_server::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2g_register_server.servername)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* s2g_register_server::release_servername() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2g_register_server.servername)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void s2g_register_server::set_allocated_servername(::std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2g_register_server.servername)
}

// bool isdefault = 2;
inline void s2g_register_server::clear_isdefault() {
  isdefault_ = false;
}
inline bool s2g_register_server::isdefault() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2g_register_server.isdefault)
  return isdefault_;
}
inline void s2g_register_server::set_isdefault(bool value) {
  
  isdefault_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2g_register_server.isdefault)
}

// -------------------------------------------------------------------

// s2c_data_message

// int64 networkid = 1;
inline void s2c_data_message::clear_networkid() {
  networkid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 s2c_data_message::networkid() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_data_message.networkid)
  return networkid_;
}
inline void s2c_data_message::set_networkid(::google::protobuf::int64 value) {
  
  networkid_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2c_data_message.networkid)
}

// bytes data = 2;
inline void s2c_data_message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& s2c_data_message::data() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_data_message.data)
  return data_.GetNoArena();
}
inline void s2c_data_message::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2c_data_message.data)
}
#if LANG_CXX11
inline void s2c_data_message::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.csserver.s2c_data_message.data)
}
#endif
inline void s2c_data_message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.csserver.s2c_data_message.data)
}
inline void s2c_data_message::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.csserver.s2c_data_message.data)
}
inline ::std::string* s2c_data_message::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2c_data_message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* s2c_data_message::release_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2c_data_message.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void s2c_data_message::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2c_data_message.data)
}

// -------------------------------------------------------------------

// s2c_multi_data_message

// repeated int64 networkids = 1;
inline int s2c_multi_data_message::networkids_size() const {
  return networkids_.size();
}
inline void s2c_multi_data_message::clear_networkids() {
  networkids_.Clear();
}
inline ::google::protobuf::int64 s2c_multi_data_message::networkids(int index) const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_multi_data_message.networkids)
  return networkids_.Get(index);
}
inline void s2c_multi_data_message::set_networkids(int index, ::google::protobuf::int64 value) {
  networkids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2c_multi_data_message.networkids)
}
inline void s2c_multi_data_message::add_networkids(::google::protobuf::int64 value) {
  networkids_.Add(value);
  // @@protoc_insertion_point(field_add:com.starlit.network.message.csserver.s2c_multi_data_message.networkids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
s2c_multi_data_message::networkids() const {
  // @@protoc_insertion_point(field_list:com.starlit.network.message.csserver.s2c_multi_data_message.networkids)
  return networkids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
s2c_multi_data_message::mutable_networkids() {
  // @@protoc_insertion_point(field_mutable_list:com.starlit.network.message.csserver.s2c_multi_data_message.networkids)
  return &networkids_;
}

// bytes data = 2;
inline void s2c_multi_data_message::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& s2c_multi_data_message::data() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_multi_data_message.data)
  return data_.GetNoArena();
}
inline void s2c_multi_data_message::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2c_multi_data_message.data)
}
#if LANG_CXX11
inline void s2c_multi_data_message::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.csserver.s2c_multi_data_message.data)
}
#endif
inline void s2c_multi_data_message::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.csserver.s2c_multi_data_message.data)
}
inline void s2c_multi_data_message::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.csserver.s2c_multi_data_message.data)
}
inline ::std::string* s2c_multi_data_message::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2c_multi_data_message.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* s2c_multi_data_message::release_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2c_multi_data_message.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void s2c_multi_data_message::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2c_multi_data_message.data)
}

// -------------------------------------------------------------------

// s2c_kick

// int64 networkid = 1;
inline void s2c_kick::clear_networkid() {
  networkid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 s2c_kick::networkid() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_kick.networkid)
  return networkid_;
}
inline void s2c_kick::set_networkid(::google::protobuf::int64 value) {
  
  networkid_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2c_kick.networkid)
}

// -------------------------------------------------------------------

// s2c_multi_kick

// repeated int64 networkids = 1;
inline int s2c_multi_kick::networkids_size() const {
  return networkids_.size();
}
inline void s2c_multi_kick::clear_networkids() {
  networkids_.Clear();
}
inline ::google::protobuf::int64 s2c_multi_kick::networkids(int index) const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_multi_kick.networkids)
  return networkids_.Get(index);
}
inline void s2c_multi_kick::set_networkids(int index, ::google::protobuf::int64 value) {
  networkids_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2c_multi_kick.networkids)
}
inline void s2c_multi_kick::add_networkids(::google::protobuf::int64 value) {
  networkids_.Add(value);
  // @@protoc_insertion_point(field_add:com.starlit.network.message.csserver.s2c_multi_kick.networkids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
s2c_multi_kick::networkids() const {
  // @@protoc_insertion_point(field_list:com.starlit.network.message.csserver.s2c_multi_kick.networkids)
  return networkids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
s2c_multi_kick::mutable_networkids() {
  // @@protoc_insertion_point(field_mutable_list:com.starlit.network.message.csserver.s2c_multi_kick.networkids)
  return &networkids_;
}

// -------------------------------------------------------------------

// s2c_setclientlevel

// int64 networkid = 1;
inline void s2c_setclientlevel::clear_networkid() {
  networkid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 s2c_setclientlevel::networkid() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_setclientlevel.networkid)
  return networkid_;
}
inline void s2c_setclientlevel::set_networkid(::google::protobuf::int64 value) {
  
  networkid_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2c_setclientlevel.networkid)
}

// int32 right = 2;
inline void s2c_setclientlevel::clear_right() {
  right_ = 0;
}
inline ::google::protobuf::int32 s2c_setclientlevel::right() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_setclientlevel.right)
  return right_;
}
inline void s2c_setclientlevel::set_right(::google::protobuf::int32 value) {
  
  right_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.s2c_setclientlevel.right)
}

// -------------------------------------------------------------------

// s2c_message

// .com.starlit.network.message.csserver.s2c_data_message data = 1;
inline bool s2c_message::has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline void s2c_message::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::s2c_data_message& s2c_message::data() const {
  const ::com::starlit::network::message::csserver::s2c_data_message* p = data_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_message.data)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::s2c_data_message*>(
      &::com::starlit::network::message::csserver::_s2c_data_message_default_instance_);
}
inline ::com::starlit::network::message::csserver::s2c_data_message* s2c_message::release_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2c_message.data)
  
  ::com::starlit::network::message::csserver::s2c_data_message* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::s2c_data_message* s2c_message::mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_data_message>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2c_message.data)
  return data_;
}
inline void s2c_message::set_allocated_data(::com::starlit::network::message::csserver::s2c_data_message* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2c_message.data)
}

// .com.starlit.network.message.csserver.s2c_multi_data_message multi_data = 2;
inline bool s2c_message::has_multi_data() const {
  return this != internal_default_instance() && multi_data_ != nullptr;
}
inline void s2c_message::clear_multi_data() {
  if (GetArenaNoVirtual() == nullptr && multi_data_ != nullptr) {
    delete multi_data_;
  }
  multi_data_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::s2c_multi_data_message& s2c_message::multi_data() const {
  const ::com::starlit::network::message::csserver::s2c_multi_data_message* p = multi_data_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_message.multi_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::s2c_multi_data_message*>(
      &::com::starlit::network::message::csserver::_s2c_multi_data_message_default_instance_);
}
inline ::com::starlit::network::message::csserver::s2c_multi_data_message* s2c_message::release_multi_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2c_message.multi_data)
  
  ::com::starlit::network::message::csserver::s2c_multi_data_message* temp = multi_data_;
  multi_data_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::s2c_multi_data_message* s2c_message::mutable_multi_data() {
  
  if (multi_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_multi_data_message>(GetArenaNoVirtual());
    multi_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2c_message.multi_data)
  return multi_data_;
}
inline void s2c_message::set_allocated_multi_data(::com::starlit::network::message::csserver::s2c_multi_data_message* multi_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete multi_data_;
  }
  if (multi_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multi_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multi_data, submessage_arena);
    }
    
  } else {
    
  }
  multi_data_ = multi_data;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2c_message.multi_data)
}

// .com.starlit.network.message.csserver.s2c_kick kick = 3;
inline bool s2c_message::has_kick() const {
  return this != internal_default_instance() && kick_ != nullptr;
}
inline void s2c_message::clear_kick() {
  if (GetArenaNoVirtual() == nullptr && kick_ != nullptr) {
    delete kick_;
  }
  kick_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::s2c_kick& s2c_message::kick() const {
  const ::com::starlit::network::message::csserver::s2c_kick* p = kick_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_message.kick)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::s2c_kick*>(
      &::com::starlit::network::message::csserver::_s2c_kick_default_instance_);
}
inline ::com::starlit::network::message::csserver::s2c_kick* s2c_message::release_kick() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2c_message.kick)
  
  ::com::starlit::network::message::csserver::s2c_kick* temp = kick_;
  kick_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::s2c_kick* s2c_message::mutable_kick() {
  
  if (kick_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_kick>(GetArenaNoVirtual());
    kick_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2c_message.kick)
  return kick_;
}
inline void s2c_message::set_allocated_kick(::com::starlit::network::message::csserver::s2c_kick* kick) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kick_;
  }
  if (kick) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kick = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kick, submessage_arena);
    }
    
  } else {
    
  }
  kick_ = kick;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2c_message.kick)
}

// .com.starlit.network.message.csserver.s2c_multi_kick multi_kick = 4;
inline bool s2c_message::has_multi_kick() const {
  return this != internal_default_instance() && multi_kick_ != nullptr;
}
inline void s2c_message::clear_multi_kick() {
  if (GetArenaNoVirtual() == nullptr && multi_kick_ != nullptr) {
    delete multi_kick_;
  }
  multi_kick_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::s2c_multi_kick& s2c_message::multi_kick() const {
  const ::com::starlit::network::message::csserver::s2c_multi_kick* p = multi_kick_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_message.multi_kick)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::s2c_multi_kick*>(
      &::com::starlit::network::message::csserver::_s2c_multi_kick_default_instance_);
}
inline ::com::starlit::network::message::csserver::s2c_multi_kick* s2c_message::release_multi_kick() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2c_message.multi_kick)
  
  ::com::starlit::network::message::csserver::s2c_multi_kick* temp = multi_kick_;
  multi_kick_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::s2c_multi_kick* s2c_message::mutable_multi_kick() {
  
  if (multi_kick_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_multi_kick>(GetArenaNoVirtual());
    multi_kick_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2c_message.multi_kick)
  return multi_kick_;
}
inline void s2c_message::set_allocated_multi_kick(::com::starlit::network::message::csserver::s2c_multi_kick* multi_kick) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete multi_kick_;
  }
  if (multi_kick) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multi_kick = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multi_kick, submessage_arena);
    }
    
  } else {
    
  }
  multi_kick_ = multi_kick;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2c_message.multi_kick)
}

// .com.starlit.network.message.csserver.s2c_setclientlevel setclientlevel = 5;
inline bool s2c_message::has_setclientlevel() const {
  return this != internal_default_instance() && setclientlevel_ != nullptr;
}
inline void s2c_message::clear_setclientlevel() {
  if (GetArenaNoVirtual() == nullptr && setclientlevel_ != nullptr) {
    delete setclientlevel_;
  }
  setclientlevel_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::s2c_setclientlevel& s2c_message::setclientlevel() const {
  const ::com::starlit::network::message::csserver::s2c_setclientlevel* p = setclientlevel_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_message.setclientlevel)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::s2c_setclientlevel*>(
      &::com::starlit::network::message::csserver::_s2c_setclientlevel_default_instance_);
}
inline ::com::starlit::network::message::csserver::s2c_setclientlevel* s2c_message::release_setclientlevel() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2c_message.setclientlevel)
  
  ::com::starlit::network::message::csserver::s2c_setclientlevel* temp = setclientlevel_;
  setclientlevel_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::s2c_setclientlevel* s2c_message::mutable_setclientlevel() {
  
  if (setclientlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::s2c_setclientlevel>(GetArenaNoVirtual());
    setclientlevel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2c_message.setclientlevel)
  return setclientlevel_;
}
inline void s2c_message::set_allocated_setclientlevel(::com::starlit::network::message::csserver::s2c_setclientlevel* setclientlevel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete setclientlevel_;
  }
  if (setclientlevel) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      setclientlevel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, setclientlevel, submessage_arena);
    }
    
  } else {
    
  }
  setclientlevel_ = setclientlevel;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2c_message.setclientlevel)
}

// .com.starlit.network.message.csserver.s2g_register_server register_server = 6;
inline bool s2c_message::has_register_server() const {
  return this != internal_default_instance() && register_server_ != nullptr;
}
inline void s2c_message::clear_register_server() {
  if (GetArenaNoVirtual() == nullptr && register_server_ != nullptr) {
    delete register_server_;
  }
  register_server_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::s2g_register_server& s2c_message::register_server() const {
  const ::com::starlit::network::message::csserver::s2g_register_server* p = register_server_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.s2c_message.register_server)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::s2g_register_server*>(
      &::com::starlit::network::message::csserver::_s2g_register_server_default_instance_);
}
inline ::com::starlit::network::message::csserver::s2g_register_server* s2c_message::release_register_server() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.s2c_message.register_server)
  
  ::com::starlit::network::message::csserver::s2g_register_server* temp = register_server_;
  register_server_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::s2g_register_server* s2c_message::mutable_register_server() {
  
  if (register_server_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::s2g_register_server>(GetArenaNoVirtual());
    register_server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.s2c_message.register_server)
  return register_server_;
}
inline void s2c_message::set_allocated_register_server(::com::starlit::network::message::csserver::s2g_register_server* register_server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete register_server_;
  }
  if (register_server) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      register_server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, register_server, submessage_arena);
    }
    
  } else {
    
  }
  register_server_ = register_server;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.s2c_message.register_server)
}

// -------------------------------------------------------------------

// c2s_client_connected

// int64 networkid = 1;
inline void c2s_client_connected::clear_networkid() {
  networkid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 c2s_client_connected::networkid() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.c2s_client_connected.networkid)
  return networkid_;
}
inline void c2s_client_connected::set_networkid(::google::protobuf::int64 value) {
  
  networkid_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.c2s_client_connected.networkid)
}

// -------------------------------------------------------------------

// c2s_client_disconnected

// int64 networkid = 1;
inline void c2s_client_disconnected::clear_networkid() {
  networkid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 c2s_client_disconnected::networkid() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.c2s_client_disconnected.networkid)
  return networkid_;
}
inline void c2s_client_disconnected::set_networkid(::google::protobuf::int64 value) {
  
  networkid_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.c2s_client_disconnected.networkid)
}

// -------------------------------------------------------------------

// c2s_client_data

// int64 networkid = 1;
inline void c2s_client_data::clear_networkid() {
  networkid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 c2s_client_data::networkid() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.c2s_client_data.networkid)
  return networkid_;
}
inline void c2s_client_data::set_networkid(::google::protobuf::int64 value) {
  
  networkid_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.c2s_client_data.networkid)
}

// bytes data = 2;
inline void c2s_client_data::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& c2s_client_data::data() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.c2s_client_data.data)
  return data_.GetNoArena();
}
inline void c2s_client_data::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.c2s_client_data.data)
}
#if LANG_CXX11
inline void c2s_client_data::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.csserver.c2s_client_data.data)
}
#endif
inline void c2s_client_data::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.csserver.c2s_client_data.data)
}
inline void c2s_client_data::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.csserver.c2s_client_data.data)
}
inline ::std::string* c2s_client_data::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.c2s_client_data.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* c2s_client_data::release_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.c2s_client_data.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void c2s_client_data::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.c2s_client_data.data)
}

// -------------------------------------------------------------------

// g2s_register_response

// bool registerok = 1;
inline void g2s_register_response::clear_registerok() {
  registerok_ = false;
}
inline bool g2s_register_response::registerok() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.g2s_register_response.registerok)
  return registerok_;
}
inline void g2s_register_response::set_registerok(bool value) {
  
  registerok_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.g2s_register_response.registerok)
}

// int32 errorcode = 2;
inline void g2s_register_response::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 g2s_register_response::errorcode() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.g2s_register_response.errorcode)
  return errorcode_;
}
inline void g2s_register_response::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.g2s_register_response.errorcode)
}

// string reason = 3;
inline void g2s_register_response::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& g2s_register_response::reason() const {
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.g2s_register_response.reason)
  return reason_.GetNoArena();
}
inline void g2s_register_response::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.starlit.network.message.csserver.g2s_register_response.reason)
}
#if LANG_CXX11
inline void g2s_register_response::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.starlit.network.message.csserver.g2s_register_response.reason)
}
#endif
inline void g2s_register_response::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.starlit.network.message.csserver.g2s_register_response.reason)
}
inline void g2s_register_response::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.starlit.network.message.csserver.g2s_register_response.reason)
}
inline ::std::string* g2s_register_response::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.g2s_register_response.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* g2s_register_response::release_reason() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.g2s_register_response.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void g2s_register_response::set_allocated_reason(::std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.g2s_register_response.reason)
}

// -------------------------------------------------------------------

// c2s_message

// .com.starlit.network.message.csserver.c2s_client_connected client_connected = 1;
inline bool c2s_message::has_client_connected() const {
  return this != internal_default_instance() && client_connected_ != nullptr;
}
inline void c2s_message::clear_client_connected() {
  if (GetArenaNoVirtual() == nullptr && client_connected_ != nullptr) {
    delete client_connected_;
  }
  client_connected_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::c2s_client_connected& c2s_message::client_connected() const {
  const ::com::starlit::network::message::csserver::c2s_client_connected* p = client_connected_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.c2s_message.client_connected)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::c2s_client_connected*>(
      &::com::starlit::network::message::csserver::_c2s_client_connected_default_instance_);
}
inline ::com::starlit::network::message::csserver::c2s_client_connected* c2s_message::release_client_connected() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.c2s_message.client_connected)
  
  ::com::starlit::network::message::csserver::c2s_client_connected* temp = client_connected_;
  client_connected_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::c2s_client_connected* c2s_message::mutable_client_connected() {
  
  if (client_connected_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::c2s_client_connected>(GetArenaNoVirtual());
    client_connected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.c2s_message.client_connected)
  return client_connected_;
}
inline void c2s_message::set_allocated_client_connected(::com::starlit::network::message::csserver::c2s_client_connected* client_connected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_connected_;
  }
  if (client_connected) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_connected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_connected, submessage_arena);
    }
    
  } else {
    
  }
  client_connected_ = client_connected;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.c2s_message.client_connected)
}

// .com.starlit.network.message.csserver.c2s_client_disconnected client_diconnected = 2;
inline bool c2s_message::has_client_diconnected() const {
  return this != internal_default_instance() && client_diconnected_ != nullptr;
}
inline void c2s_message::clear_client_diconnected() {
  if (GetArenaNoVirtual() == nullptr && client_diconnected_ != nullptr) {
    delete client_diconnected_;
  }
  client_diconnected_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::c2s_client_disconnected& c2s_message::client_diconnected() const {
  const ::com::starlit::network::message::csserver::c2s_client_disconnected* p = client_diconnected_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.c2s_message.client_diconnected)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::c2s_client_disconnected*>(
      &::com::starlit::network::message::csserver::_c2s_client_disconnected_default_instance_);
}
inline ::com::starlit::network::message::csserver::c2s_client_disconnected* c2s_message::release_client_diconnected() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.c2s_message.client_diconnected)
  
  ::com::starlit::network::message::csserver::c2s_client_disconnected* temp = client_diconnected_;
  client_diconnected_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::c2s_client_disconnected* c2s_message::mutable_client_diconnected() {
  
  if (client_diconnected_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::c2s_client_disconnected>(GetArenaNoVirtual());
    client_diconnected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.c2s_message.client_diconnected)
  return client_diconnected_;
}
inline void c2s_message::set_allocated_client_diconnected(::com::starlit::network::message::csserver::c2s_client_disconnected* client_diconnected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_diconnected_;
  }
  if (client_diconnected) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_diconnected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_diconnected, submessage_arena);
    }
    
  } else {
    
  }
  client_diconnected_ = client_diconnected;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.c2s_message.client_diconnected)
}

// .com.starlit.network.message.csserver.c2s_client_data client_data = 3;
inline bool c2s_message::has_client_data() const {
  return this != internal_default_instance() && client_data_ != nullptr;
}
inline void c2s_message::clear_client_data() {
  if (GetArenaNoVirtual() == nullptr && client_data_ != nullptr) {
    delete client_data_;
  }
  client_data_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::c2s_client_data& c2s_message::client_data() const {
  const ::com::starlit::network::message::csserver::c2s_client_data* p = client_data_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.c2s_message.client_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::c2s_client_data*>(
      &::com::starlit::network::message::csserver::_c2s_client_data_default_instance_);
}
inline ::com::starlit::network::message::csserver::c2s_client_data* c2s_message::release_client_data() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.c2s_message.client_data)
  
  ::com::starlit::network::message::csserver::c2s_client_data* temp = client_data_;
  client_data_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::c2s_client_data* c2s_message::mutable_client_data() {
  
  if (client_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::c2s_client_data>(GetArenaNoVirtual());
    client_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.c2s_message.client_data)
  return client_data_;
}
inline void c2s_message::set_allocated_client_data(::com::starlit::network::message::csserver::c2s_client_data* client_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_data_;
  }
  if (client_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_data, submessage_arena);
    }
    
  } else {
    
  }
  client_data_ = client_data;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.c2s_message.client_data)
}

// .com.starlit.network.message.csserver.g2s_register_response register_response = 4;
inline bool c2s_message::has_register_response() const {
  return this != internal_default_instance() && register_response_ != nullptr;
}
inline void c2s_message::clear_register_response() {
  if (GetArenaNoVirtual() == nullptr && register_response_ != nullptr) {
    delete register_response_;
  }
  register_response_ = nullptr;
}
inline const ::com::starlit::network::message::csserver::g2s_register_response& c2s_message::register_response() const {
  const ::com::starlit::network::message::csserver::g2s_register_response* p = register_response_;
  // @@protoc_insertion_point(field_get:com.starlit.network.message.csserver.c2s_message.register_response)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::starlit::network::message::csserver::g2s_register_response*>(
      &::com::starlit::network::message::csserver::_g2s_register_response_default_instance_);
}
inline ::com::starlit::network::message::csserver::g2s_register_response* c2s_message::release_register_response() {
  // @@protoc_insertion_point(field_release:com.starlit.network.message.csserver.c2s_message.register_response)
  
  ::com::starlit::network::message::csserver::g2s_register_response* temp = register_response_;
  register_response_ = nullptr;
  return temp;
}
inline ::com::starlit::network::message::csserver::g2s_register_response* c2s_message::mutable_register_response() {
  
  if (register_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::starlit::network::message::csserver::g2s_register_response>(GetArenaNoVirtual());
    register_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.starlit.network.message.csserver.c2s_message.register_response)
  return register_response_;
}
inline void c2s_message::set_allocated_register_response(::com::starlit::network::message::csserver::g2s_register_response* register_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete register_response_;
  }
  if (register_response) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      register_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, register_response, submessage_arena);
    }
    
  } else {
    
  }
  register_response_ = register_response;
  // @@protoc_insertion_point(field_set_allocated:com.starlit.network.message.csserver.c2s_message.register_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace csserver
}  // namespace message
}  // namespace network
}  // namespace starlit
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ServerSessionMessage_2eproto
