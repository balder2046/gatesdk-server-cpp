// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientSessionMessage.proto

#include "ClientSessionMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_ClientSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_c2g_data_message_ClientSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_c2g_ping_request_ClientSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_g2c_close_ClientSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_g2c_data_message_ClientSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_g2c_ping_response_ClientSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_g2c_server_connected_ClientSessionMessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ClientSessionMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_g2c_server_disconnected_ClientSessionMessage_2eproto;
namespace com {
namespace starlit {
namespace network {
namespace message {
namespace client {
class c2g_data_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<c2g_data_message> _instance;
} _c2g_data_message_default_instance_;
class c2g_ping_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<c2g_ping_request> _instance;
} _c2g_ping_request_default_instance_;
class c2g_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<c2g_message> _instance;
} _c2g_message_default_instance_;
class g2c_data_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<g2c_data_message> _instance;
} _g2c_data_message_default_instance_;
class g2c_ping_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<g2c_ping_response> _instance;
} _g2c_ping_response_default_instance_;
class g2c_server_connectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<g2c_server_connected> _instance;
} _g2c_server_connected_default_instance_;
class g2c_server_disconnectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<g2c_server_disconnected> _instance;
} _g2c_server_disconnected_default_instance_;
class g2c_closeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<g2c_close> _instance;
} _g2c_close_default_instance_;
class g2c_messageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<g2c_message> _instance;
} _g2c_message_default_instance_;
}  // namespace client
}  // namespace message
}  // namespace network
}  // namespace starlit
}  // namespace com
static void InitDefaultsc2g_data_message_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_c2g_data_message_default_instance_;
    new (ptr) ::com::starlit::network::message::client::c2g_data_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::c2g_data_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_c2g_data_message_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsc2g_data_message_ClientSessionMessage_2eproto}, {}};

static void InitDefaultsc2g_ping_request_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_c2g_ping_request_default_instance_;
    new (ptr) ::com::starlit::network::message::client::c2g_ping_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::c2g_ping_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_c2g_ping_request_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsc2g_ping_request_ClientSessionMessage_2eproto}, {}};

static void InitDefaultsc2g_message_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_c2g_message_default_instance_;
    new (ptr) ::com::starlit::network::message::client::c2g_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::c2g_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_c2g_message_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsc2g_message_ClientSessionMessage_2eproto}, {
      &scc_info_c2g_data_message_ClientSessionMessage_2eproto.base,
      &scc_info_c2g_ping_request_ClientSessionMessage_2eproto.base,}};

static void InitDefaultsg2c_data_message_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_g2c_data_message_default_instance_;
    new (ptr) ::com::starlit::network::message::client::g2c_data_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::g2c_data_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_g2c_data_message_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsg2c_data_message_ClientSessionMessage_2eproto}, {}};

static void InitDefaultsg2c_ping_response_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_g2c_ping_response_default_instance_;
    new (ptr) ::com::starlit::network::message::client::g2c_ping_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::g2c_ping_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_g2c_ping_response_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsg2c_ping_response_ClientSessionMessage_2eproto}, {}};

static void InitDefaultsg2c_server_connected_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_g2c_server_connected_default_instance_;
    new (ptr) ::com::starlit::network::message::client::g2c_server_connected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::g2c_server_connected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_g2c_server_connected_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsg2c_server_connected_ClientSessionMessage_2eproto}, {}};

static void InitDefaultsg2c_server_disconnected_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_g2c_server_disconnected_default_instance_;
    new (ptr) ::com::starlit::network::message::client::g2c_server_disconnected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::g2c_server_disconnected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_g2c_server_disconnected_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsg2c_server_disconnected_ClientSessionMessage_2eproto}, {}};

static void InitDefaultsg2c_close_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_g2c_close_default_instance_;
    new (ptr) ::com::starlit::network::message::client::g2c_close();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::g2c_close::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_g2c_close_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsg2c_close_ClientSessionMessage_2eproto}, {}};

static void InitDefaultsg2c_message_ClientSessionMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::starlit::network::message::client::_g2c_message_default_instance_;
    new (ptr) ::com::starlit::network::message::client::g2c_message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::starlit::network::message::client::g2c_message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_g2c_message_ClientSessionMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsg2c_message_ClientSessionMessage_2eproto}, {
      &scc_info_g2c_data_message_ClientSessionMessage_2eproto.base,
      &scc_info_g2c_ping_response_ClientSessionMessage_2eproto.base,
      &scc_info_g2c_server_connected_ClientSessionMessage_2eproto.base,
      &scc_info_g2c_server_disconnected_ClientSessionMessage_2eproto.base,
      &scc_info_g2c_close_ClientSessionMessage_2eproto.base,}};

namespace com {
namespace starlit {
namespace network {
namespace message {
namespace client {

// ===================================================================

void c2g_data_message::InitAsDefaultInstance() {
}
class c2g_data_message::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c2g_data_message::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c2g_data_message::c2g_data_message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.c2g_data_message)
}
c2g_data_message::c2g_data_message(const c2g_data_message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.c2g_data_message)
}

void c2g_data_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_c2g_data_message_ClientSessionMessage_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

c2g_data_message::~c2g_data_message() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.c2g_data_message)
  SharedDtor();
}

void c2g_data_message::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void c2g_data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const c2g_data_message& c2g_data_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_c2g_data_message_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void c2g_data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.c2g_data_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* c2g_data_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<c2g_data_message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool c2g_data_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.c2g_data_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.c2g_data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.c2g_data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void c2g_data_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.c2g_data_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.c2g_data_message)
}

size_t c2g_data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.c2g_data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void c2g_data_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const c2g_data_message*>(&from));
}

void c2g_data_message::MergeFrom(const c2g_data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.c2g_data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void c2g_data_message::CopyFrom(const c2g_data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.c2g_data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2g_data_message::IsInitialized() const {
  return true;
}

void c2g_data_message::Swap(c2g_data_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c2g_data_message::InternalSwap(c2g_data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string c2g_data_message::GetTypeName() const {
  return "com.starlit.network.message.client.c2g_data_message";
}


// ===================================================================

void c2g_ping_request::InitAsDefaultInstance() {
}
class c2g_ping_request::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c2g_ping_request::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c2g_ping_request::c2g_ping_request()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.c2g_ping_request)
}
c2g_ping_request::c2g_ping_request(const c2g_ping_request& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.c2g_ping_request)
}

void c2g_ping_request::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

c2g_ping_request::~c2g_ping_request() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.c2g_ping_request)
  SharedDtor();
}

void c2g_ping_request::SharedDtor() {
}

void c2g_ping_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const c2g_ping_request& c2g_ping_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_c2g_ping_request_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void c2g_ping_request::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.c2g_ping_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* c2g_ping_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<c2g_ping_request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool c2g_ping_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.c2g_ping_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.c2g_ping_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.c2g_ping_request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void c2g_ping_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.c2g_ping_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.c2g_ping_request)
}

size_t c2g_ping_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.c2g_ping_request)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void c2g_ping_request::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const c2g_ping_request*>(&from));
}

void c2g_ping_request::MergeFrom(const c2g_ping_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.c2g_ping_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void c2g_ping_request::CopyFrom(const c2g_ping_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.c2g_ping_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2g_ping_request::IsInitialized() const {
  return true;
}

void c2g_ping_request::Swap(c2g_ping_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c2g_ping_request::InternalSwap(c2g_ping_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::std::string c2g_ping_request::GetTypeName() const {
  return "com.starlit.network.message.client.c2g_ping_request";
}


// ===================================================================

void c2g_message::InitAsDefaultInstance() {
  ::com::starlit::network::message::client::_c2g_message_default_instance_._instance.get_mutable()->data_ = const_cast< ::com::starlit::network::message::client::c2g_data_message*>(
      ::com::starlit::network::message::client::c2g_data_message::internal_default_instance());
  ::com::starlit::network::message::client::_c2g_message_default_instance_._instance.get_mutable()->ping_request_ = const_cast< ::com::starlit::network::message::client::c2g_ping_request*>(
      ::com::starlit::network::message::client::c2g_ping_request::internal_default_instance());
}
class c2g_message::HasBitSetters {
 public:
  static const ::com::starlit::network::message::client::c2g_data_message& data(const c2g_message* msg);
  static const ::com::starlit::network::message::client::c2g_ping_request& ping_request(const c2g_message* msg);
};

const ::com::starlit::network::message::client::c2g_data_message&
c2g_message::HasBitSetters::data(const c2g_message* msg) {
  return *msg->data_;
}
const ::com::starlit::network::message::client::c2g_ping_request&
c2g_message::HasBitSetters::ping_request(const c2g_message* msg) {
  return *msg->ping_request_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c2g_message::kDataFieldNumber;
const int c2g_message::kPingRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c2g_message::c2g_message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.c2g_message)
}
c2g_message::c2g_message(const c2g_message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::com::starlit::network::message::client::c2g_data_message(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from.has_ping_request()) {
    ping_request_ = new ::com::starlit::network::message::client::c2g_ping_request(*from.ping_request_);
  } else {
    ping_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.c2g_message)
}

void c2g_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_c2g_message_ClientSessionMessage_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ping_request_) -
      reinterpret_cast<char*>(&data_)) + sizeof(ping_request_));
}

c2g_message::~c2g_message() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.c2g_message)
  SharedDtor();
}

void c2g_message::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete ping_request_;
}

void c2g_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const c2g_message& c2g_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_c2g_message_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void c2g_message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.c2g_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ping_request_ != nullptr) {
    delete ping_request_;
  }
  ping_request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* c2g_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<c2g_message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.starlit.network.message.client.c2g_data_message data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::client::c2g_data_message::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.client.c2g_ping_request ping_request = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::client::c2g_ping_request::_InternalParse;
        object = msg->mutable_ping_request();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool c2g_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.c2g_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.starlit.network.message.client.c2g_data_message data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.client.c2g_ping_request ping_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.c2g_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.c2g_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void c2g_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.c2g_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.starlit.network.message.client.c2g_data_message data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::data(this), output);
  }

  // .com.starlit.network.message.client.c2g_ping_request ping_request = 2;
  if (this->has_ping_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::ping_request(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.c2g_message)
}

size_t c2g_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.c2g_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.starlit.network.message.client.c2g_data_message data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .com.starlit.network.message.client.c2g_ping_request ping_request = 2;
  if (this->has_ping_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ping_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void c2g_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const c2g_message*>(&from));
}

void c2g_message::MergeFrom(const c2g_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.c2g_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::com::starlit::network::message::client::c2g_data_message::MergeFrom(from.data());
  }
  if (from.has_ping_request()) {
    mutable_ping_request()->::com::starlit::network::message::client::c2g_ping_request::MergeFrom(from.ping_request());
  }
}

void c2g_message::CopyFrom(const c2g_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.c2g_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2g_message::IsInitialized() const {
  return true;
}

void c2g_message::Swap(c2g_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c2g_message::InternalSwap(c2g_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(ping_request_, other->ping_request_);
}

::std::string c2g_message::GetTypeName() const {
  return "com.starlit.network.message.client.c2g_message";
}


// ===================================================================

void g2c_data_message::InitAsDefaultInstance() {
}
class g2c_data_message::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int g2c_data_message::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

g2c_data_message::g2c_data_message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.g2c_data_message)
}
g2c_data_message::g2c_data_message(const g2c_data_message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.g2c_data_message)
}

void g2c_data_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_g2c_data_message_ClientSessionMessage_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

g2c_data_message::~g2c_data_message() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.g2c_data_message)
  SharedDtor();
}

void g2c_data_message::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void g2c_data_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const g2c_data_message& g2c_data_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_g2c_data_message_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void g2c_data_message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.g2c_data_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* g2c_data_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<g2c_data_message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool g2c_data_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.g2c_data_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.g2c_data_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.g2c_data_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void g2c_data_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.g2c_data_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.g2c_data_message)
}

size_t g2c_data_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.g2c_data_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void g2c_data_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const g2c_data_message*>(&from));
}

void g2c_data_message::MergeFrom(const g2c_data_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.g2c_data_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void g2c_data_message::CopyFrom(const g2c_data_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.g2c_data_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool g2c_data_message::IsInitialized() const {
  return true;
}

void g2c_data_message::Swap(g2c_data_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void g2c_data_message::InternalSwap(g2c_data_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string g2c_data_message::GetTypeName() const {
  return "com.starlit.network.message.client.g2c_data_message";
}


// ===================================================================

void g2c_ping_response::InitAsDefaultInstance() {
}
class g2c_ping_response::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int g2c_ping_response::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

g2c_ping_response::g2c_ping_response()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.g2c_ping_response)
}
g2c_ping_response::g2c_ping_response(const g2c_ping_response& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.g2c_ping_response)
}

void g2c_ping_response::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

g2c_ping_response::~g2c_ping_response() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.g2c_ping_response)
  SharedDtor();
}

void g2c_ping_response::SharedDtor() {
}

void g2c_ping_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const g2c_ping_response& g2c_ping_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_g2c_ping_response_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void g2c_ping_response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.g2c_ping_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* g2c_ping_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<g2c_ping_response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool g2c_ping_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.g2c_ping_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.g2c_ping_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.g2c_ping_response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void g2c_ping_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.g2c_ping_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.g2c_ping_response)
}

size_t g2c_ping_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.g2c_ping_response)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void g2c_ping_response::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const g2c_ping_response*>(&from));
}

void g2c_ping_response::MergeFrom(const g2c_ping_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.g2c_ping_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void g2c_ping_response::CopyFrom(const g2c_ping_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.g2c_ping_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool g2c_ping_response::IsInitialized() const {
  return true;
}

void g2c_ping_response::Swap(g2c_ping_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void g2c_ping_response::InternalSwap(g2c_ping_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::std::string g2c_ping_response::GetTypeName() const {
  return "com.starlit.network.message.client.g2c_ping_response";
}


// ===================================================================

void g2c_server_connected::InitAsDefaultInstance() {
}
class g2c_server_connected::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int g2c_server_connected::kServernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

g2c_server_connected::g2c_server_connected()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.g2c_server_connected)
}
g2c_server_connected::g2c_server_connected(const g2c_server_connected& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servername().size() > 0) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.g2c_server_connected)
}

void g2c_server_connected::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_g2c_server_connected_ClientSessionMessage_2eproto.base);
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

g2c_server_connected::~g2c_server_connected() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.g2c_server_connected)
  SharedDtor();
}

void g2c_server_connected::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void g2c_server_connected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const g2c_server_connected& g2c_server_connected::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_g2c_server_connected_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void g2c_server_connected::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.g2c_server_connected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* g2c_server_connected::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<g2c_server_connected*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string servername = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_servername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool g2c_server_connected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.g2c_server_connected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string servername = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.starlit.network.message.client.g2c_server_connected.servername"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.g2c_server_connected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.g2c_server_connected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void g2c_server_connected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.g2c_server_connected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string servername = 1;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.starlit.network.message.client.g2c_server_connected.servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servername(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.g2c_server_connected)
}

size_t g2c_server_connected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.g2c_server_connected)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string servername = 1;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void g2c_server_connected::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const g2c_server_connected*>(&from));
}

void g2c_server_connected::MergeFrom(const g2c_server_connected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.g2c_server_connected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
}

void g2c_server_connected::CopyFrom(const g2c_server_connected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.g2c_server_connected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool g2c_server_connected::IsInitialized() const {
  return true;
}

void g2c_server_connected::Swap(g2c_server_connected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void g2c_server_connected::InternalSwap(g2c_server_connected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  servername_.Swap(&other->servername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string g2c_server_connected::GetTypeName() const {
  return "com.starlit.network.message.client.g2c_server_connected";
}


// ===================================================================

void g2c_server_disconnected::InitAsDefaultInstance() {
}
class g2c_server_disconnected::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int g2c_server_disconnected::kServernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

g2c_server_disconnected::g2c_server_disconnected()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.g2c_server_disconnected)
}
g2c_server_disconnected::g2c_server_disconnected(const g2c_server_disconnected& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servername().size() > 0) {
    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.g2c_server_disconnected)
}

void g2c_server_disconnected::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_g2c_server_disconnected_ClientSessionMessage_2eproto.base);
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

g2c_server_disconnected::~g2c_server_disconnected() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.g2c_server_disconnected)
  SharedDtor();
}

void g2c_server_disconnected::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void g2c_server_disconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const g2c_server_disconnected& g2c_server_disconnected::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_g2c_server_disconnected_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void g2c_server_disconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.g2c_server_disconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* g2c_server_disconnected::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<g2c_server_disconnected*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string servername = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_servername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool g2c_server_disconnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.g2c_server_disconnected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string servername = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), static_cast<int>(this->servername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.starlit.network.message.client.g2c_server_disconnected.servername"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.g2c_server_disconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.g2c_server_disconnected)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void g2c_server_disconnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.g2c_server_disconnected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string servername = 1;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), static_cast<int>(this->servername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.starlit.network.message.client.g2c_server_disconnected.servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servername(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.g2c_server_disconnected)
}

size_t g2c_server_disconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.g2c_server_disconnected)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string servername = 1;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void g2c_server_disconnected::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const g2c_server_disconnected*>(&from));
}

void g2c_server_disconnected::MergeFrom(const g2c_server_disconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.g2c_server_disconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
}

void g2c_server_disconnected::CopyFrom(const g2c_server_disconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.g2c_server_disconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool g2c_server_disconnected::IsInitialized() const {
  return true;
}

void g2c_server_disconnected::Swap(g2c_server_disconnected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void g2c_server_disconnected::InternalSwap(g2c_server_disconnected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  servername_.Swap(&other->servername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string g2c_server_disconnected::GetTypeName() const {
  return "com.starlit.network.message.client.g2c_server_disconnected";
}


// ===================================================================

void g2c_close::InitAsDefaultInstance() {
}
class g2c_close::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int g2c_close::kErrorcodeFieldNumber;
const int g2c_close::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

g2c_close::g2c_close()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.g2c_close)
}
g2c_close::g2c_close(const g2c_close& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.g2c_close)
}

void g2c_close::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_g2c_close_ClientSessionMessage_2eproto.base);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0;
}

g2c_close::~g2c_close() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.g2c_close)
  SharedDtor();
}

void g2c_close::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void g2c_close::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const g2c_close& g2c_close::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_g2c_close_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void g2c_close::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.g2c_close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* g2c_close::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<g2c_close*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 errorcode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_errorcode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string reason = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName(nullptr);
        object = msg->mutable_reason();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool g2c_close::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.g2c_close)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 errorcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.starlit.network.message.client.g2c_close.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.g2c_close)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.g2c_close)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void g2c_close::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.g2c_close)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorcode = 1;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.starlit.network.message.client.g2c_close.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.g2c_close)
}

size_t g2c_close::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.g2c_close)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // int32 errorcode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void g2c_close::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const g2c_close*>(&from));
}

void g2c_close::MergeFrom(const g2c_close& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.g2c_close)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void g2c_close::CopyFrom(const g2c_close& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.g2c_close)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool g2c_close::IsInitialized() const {
  return true;
}

void g2c_close::Swap(g2c_close* other) {
  if (other == this) return;
  InternalSwap(other);
}
void g2c_close::InternalSwap(g2c_close* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
}

::std::string g2c_close::GetTypeName() const {
  return "com.starlit.network.message.client.g2c_close";
}


// ===================================================================

void g2c_message::InitAsDefaultInstance() {
  ::com::starlit::network::message::client::_g2c_message_default_instance_._instance.get_mutable()->data_ = const_cast< ::com::starlit::network::message::client::g2c_data_message*>(
      ::com::starlit::network::message::client::g2c_data_message::internal_default_instance());
  ::com::starlit::network::message::client::_g2c_message_default_instance_._instance.get_mutable()->ping_response_ = const_cast< ::com::starlit::network::message::client::g2c_ping_response*>(
      ::com::starlit::network::message::client::g2c_ping_response::internal_default_instance());
  ::com::starlit::network::message::client::_g2c_message_default_instance_._instance.get_mutable()->server_connected_ = const_cast< ::com::starlit::network::message::client::g2c_server_connected*>(
      ::com::starlit::network::message::client::g2c_server_connected::internal_default_instance());
  ::com::starlit::network::message::client::_g2c_message_default_instance_._instance.get_mutable()->server_disconnected_ = const_cast< ::com::starlit::network::message::client::g2c_server_disconnected*>(
      ::com::starlit::network::message::client::g2c_server_disconnected::internal_default_instance());
  ::com::starlit::network::message::client::_g2c_message_default_instance_._instance.get_mutable()->close_ = const_cast< ::com::starlit::network::message::client::g2c_close*>(
      ::com::starlit::network::message::client::g2c_close::internal_default_instance());
}
class g2c_message::HasBitSetters {
 public:
  static const ::com::starlit::network::message::client::g2c_data_message& data(const g2c_message* msg);
  static const ::com::starlit::network::message::client::g2c_ping_response& ping_response(const g2c_message* msg);
  static const ::com::starlit::network::message::client::g2c_server_connected& server_connected(const g2c_message* msg);
  static const ::com::starlit::network::message::client::g2c_server_disconnected& server_disconnected(const g2c_message* msg);
  static const ::com::starlit::network::message::client::g2c_close& close(const g2c_message* msg);
};

const ::com::starlit::network::message::client::g2c_data_message&
g2c_message::HasBitSetters::data(const g2c_message* msg) {
  return *msg->data_;
}
const ::com::starlit::network::message::client::g2c_ping_response&
g2c_message::HasBitSetters::ping_response(const g2c_message* msg) {
  return *msg->ping_response_;
}
const ::com::starlit::network::message::client::g2c_server_connected&
g2c_message::HasBitSetters::server_connected(const g2c_message* msg) {
  return *msg->server_connected_;
}
const ::com::starlit::network::message::client::g2c_server_disconnected&
g2c_message::HasBitSetters::server_disconnected(const g2c_message* msg) {
  return *msg->server_disconnected_;
}
const ::com::starlit::network::message::client::g2c_close&
g2c_message::HasBitSetters::close(const g2c_message* msg) {
  return *msg->close_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int g2c_message::kDataFieldNumber;
const int g2c_message::kPingResponseFieldNumber;
const int g2c_message::kServerConnectedFieldNumber;
const int g2c_message::kServerDisconnectedFieldNumber;
const int g2c_message::kCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

g2c_message::g2c_message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.starlit.network.message.client.g2c_message)
}
g2c_message::g2c_message(const g2c_message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::com::starlit::network::message::client::g2c_data_message(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from.has_ping_response()) {
    ping_response_ = new ::com::starlit::network::message::client::g2c_ping_response(*from.ping_response_);
  } else {
    ping_response_ = nullptr;
  }
  if (from.has_server_connected()) {
    server_connected_ = new ::com::starlit::network::message::client::g2c_server_connected(*from.server_connected_);
  } else {
    server_connected_ = nullptr;
  }
  if (from.has_server_disconnected()) {
    server_disconnected_ = new ::com::starlit::network::message::client::g2c_server_disconnected(*from.server_disconnected_);
  } else {
    server_disconnected_ = nullptr;
  }
  if (from.has_close()) {
    close_ = new ::com::starlit::network::message::client::g2c_close(*from.close_);
  } else {
    close_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.starlit.network.message.client.g2c_message)
}

void g2c_message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_g2c_message_ClientSessionMessage_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&data_)) + sizeof(close_));
}

g2c_message::~g2c_message() {
  // @@protoc_insertion_point(destructor:com.starlit.network.message.client.g2c_message)
  SharedDtor();
}

void g2c_message::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete ping_response_;
  if (this != internal_default_instance()) delete server_connected_;
  if (this != internal_default_instance()) delete server_disconnected_;
  if (this != internal_default_instance()) delete close_;
}

void g2c_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const g2c_message& g2c_message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_g2c_message_ClientSessionMessage_2eproto.base);
  return *internal_default_instance();
}


void g2c_message::Clear() {
// @@protoc_insertion_point(message_clear_start:com.starlit.network.message.client.g2c_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ping_response_ != nullptr) {
    delete ping_response_;
  }
  ping_response_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_connected_ != nullptr) {
    delete server_connected_;
  }
  server_connected_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && server_disconnected_ != nullptr) {
    delete server_disconnected_;
  }
  server_disconnected_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* g2c_message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<g2c_message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.starlit.network.message.client.g2c_data_message data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::client::g2c_data_message::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.client.g2c_ping_response ping_response = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::client::g2c_ping_response::_InternalParse;
        object = msg->mutable_ping_response();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.client.g2c_server_connected server_connected = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::client::g2c_server_connected::_InternalParse;
        object = msg->mutable_server_connected();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.client.g2c_server_disconnected server_disconnected = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::client::g2c_server_disconnected::_InternalParse;
        object = msg->mutable_server_disconnected();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.starlit.network.message.client.g2c_close close = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::starlit::network::message::client::g2c_close::_InternalParse;
        object = msg->mutable_close();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool g2c_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.starlit.network.message.client.g2c_message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.starlit.network.message.client.g2c_data_message data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.client.g2c_ping_response ping_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.client.g2c_server_connected server_connected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_connected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.client.g2c_server_disconnected server_disconnected = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_disconnected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.starlit.network.message.client.g2c_close close = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_close()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.starlit.network.message.client.g2c_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.starlit.network.message.client.g2c_message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void g2c_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.starlit.network.message.client.g2c_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.starlit.network.message.client.g2c_data_message data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::data(this), output);
  }

  // .com.starlit.network.message.client.g2c_ping_response ping_response = 2;
  if (this->has_ping_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, HasBitSetters::ping_response(this), output);
  }

  // .com.starlit.network.message.client.g2c_server_connected server_connected = 3;
  if (this->has_server_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::server_connected(this), output);
  }

  // .com.starlit.network.message.client.g2c_server_disconnected server_disconnected = 4;
  if (this->has_server_disconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, HasBitSetters::server_disconnected(this), output);
  }

  // .com.starlit.network.message.client.g2c_close close = 5;
  if (this->has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::close(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.starlit.network.message.client.g2c_message)
}

size_t g2c_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.starlit.network.message.client.g2c_message)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.starlit.network.message.client.g2c_data_message data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .com.starlit.network.message.client.g2c_ping_response ping_response = 2;
  if (this->has_ping_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ping_response_);
  }

  // .com.starlit.network.message.client.g2c_server_connected server_connected = 3;
  if (this->has_server_connected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_connected_);
  }

  // .com.starlit.network.message.client.g2c_server_disconnected server_disconnected = 4;
  if (this->has_server_disconnected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_disconnected_);
  }

  // .com.starlit.network.message.client.g2c_close close = 5;
  if (this->has_close()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *close_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void g2c_message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const g2c_message*>(&from));
}

void g2c_message::MergeFrom(const g2c_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.starlit.network.message.client.g2c_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::com::starlit::network::message::client::g2c_data_message::MergeFrom(from.data());
  }
  if (from.has_ping_response()) {
    mutable_ping_response()->::com::starlit::network::message::client::g2c_ping_response::MergeFrom(from.ping_response());
  }
  if (from.has_server_connected()) {
    mutable_server_connected()->::com::starlit::network::message::client::g2c_server_connected::MergeFrom(from.server_connected());
  }
  if (from.has_server_disconnected()) {
    mutable_server_disconnected()->::com::starlit::network::message::client::g2c_server_disconnected::MergeFrom(from.server_disconnected());
  }
  if (from.has_close()) {
    mutable_close()->::com::starlit::network::message::client::g2c_close::MergeFrom(from.close());
  }
}

void g2c_message::CopyFrom(const g2c_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.starlit.network.message.client.g2c_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool g2c_message::IsInitialized() const {
  return true;
}

void g2c_message::Swap(g2c_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void g2c_message::InternalSwap(g2c_message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(ping_response_, other->ping_response_);
  swap(server_connected_, other->server_connected_);
  swap(server_disconnected_, other->server_disconnected_);
  swap(close_, other->close_);
}

::std::string g2c_message::GetTypeName() const {
  return "com.starlit.network.message.client.g2c_message";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace client
}  // namespace message
}  // namespace network
}  // namespace starlit
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::c2g_data_message* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::c2g_data_message >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::c2g_data_message >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::c2g_ping_request* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::c2g_ping_request >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::c2g_ping_request >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::c2g_message* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::c2g_message >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::c2g_message >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::g2c_data_message* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::g2c_data_message >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::g2c_data_message >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::g2c_ping_response* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::g2c_ping_response >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::g2c_ping_response >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::g2c_server_connected* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::g2c_server_connected >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::g2c_server_connected >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::g2c_server_disconnected* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::g2c_server_disconnected >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::g2c_server_disconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::g2c_close* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::g2c_close >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::g2c_close >(arena);
}
template<> PROTOBUF_NOINLINE ::com::starlit::network::message::client::g2c_message* Arena::CreateMaybeMessage< ::com::starlit::network::message::client::g2c_message >(Arena* arena) {
  return Arena::CreateInternal< ::com::starlit::network::message::client::g2c_message >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
